*,:after,:before{margin:0;padding:0;box-sizing:border-box}html{scroll-behavior:smooth}body{font-family:Roboto Flex,serif;font-weight:lighter;font-size:1.6rem;min-width:320px}.section{background-color:rgba(0,0,0,.914);color:#f5f5f5}.header{color:#f5f5f5;background-image:linear-gradient(45deg,#000,rgba(0,0,0,.9));text-align:center;padding:.3em 0}.header__tittle{font-family:Audiowide,sans-serif;font-size:.9rem}.header__span{color:red}.hero{position:relative;flex-direction:column;background-image:linear-gradient(45deg,rgba(0,0,0,.4),rgba(0,0,0,.5)),url(/dist/img/background_header2.png);background-position:50%;background-size:cover;background-repeat:no-repeat;background-attachment:scroll;height:50vh;z-index:1;overflow:hidden}.hero,.hero__info{display:flex;justify-content:space-between;align-items:center;width:100%}.hero__info{padding:.2em;flex-direction:row}.hero__text{color:#f5f5f5;font-size:.6rem}.hero__text .fa-phone{margin-right:.4em}.hero__img{width:150px;height:125px;opacity:.5}.hero__lamp,.hero__lamp2,.hero__lamp3,.hero__lamp4{left:885px;top:212px;position:absolute;width:23px;height:23px;background-color:#fff;border-radius:50%;box-shadow:0 0 50px hsla(0,0%,100%,.7);opacity:0;filter:blur(20px);animation:a 1s ease-in-out 0s 3 alternate}.hero__lamp2{left:130px;top:100px}.hero__lamp3{left:235px;top:100px}.hero__lamp4{left:255px;top:100px}@keyframes a{0%{opacity:0;filter:blur(20px);box-shadow:0 0 50px hsla(0,0%,100%,.1)}50%{opacity:1;filter:blur(5px);box-shadow:0 0 100px #fff}to{opacity:0;filter:blur(20px);box-shadow:0 0 50px hsla(0,0%,100%,.1)}}.info__icon{font-size:1rem;padding:.5em 0}.info__cards{justify-content:space-around;width:100vw}.info__card,.info__cards{display:flex;align-items:center}.info__card{color:#f5f5f5;justify-content:center;flex-direction:column;text-align:center;width:200px;border-radius:8px;padding:.5em 1em}.info__header{font-size:.7rem;color:#fff}.info__card:first-child,.info__card:nth-child(2){opacity:0;animation:b 2s ease-out forwards}.info__card:nth-child(2){animation-delay:1s}.info__card:nth-child(3){opacity:0;animation:b 2s ease-out forwards;animation-delay:2s}@keyframes b{0%{opacity:0}to{opacity:1}}.review{padding:.5em 1em;background-color:#000;display:flex;justify-content:center;align-items:center;flex-direction:row}.review__text{font-size:.8rem;font-weight:700;margin-left:2em}.review__tittle{text-align:center;font-family:Audiowide,sans-serif;font-size:.6rem;margin-right:1em}.review__box{position:relative}.review__box,.review__info{display:flex;justify-content:center;align-items:center;flex-direction:row;font-size:1.2rem}.review a{margin-right:1em}.review a img{position:absolute;top:-12px;left:-20px;width:45px;height:40px}.review__info{margin-right:2em}.about__title{font-family:Audiowide,sans-serif;font-size:1.2rem;padding:.3em .5em;border-bottom:1px solid #fff}.about__box{display:flex;justify-content:center;align-items:center;flex-direction:column;width:100%}.about__img{width:250px;margin-top:.5em;border-radius:8px;box-shadow:5px 5px 10px hsla(0,0%,100%,.2)}.about__list{list-style:none;padding:.5em 0}.about__list--item{font-size:.8rem;margin-bottom:.5em}.logo{background-color:#000;height:50px}.logo__box{display:flex;justify-content:space-evenly;align-items:center;overflow:hidden}.logo__img{width:50px;height:50px}.logo__img--bmw{height:55px}.logo__img--toyota{height:45px}.logo__img--nissan{height:35px}.services{background-image:linear-gradient(45deg,rgba(0,0,0,.4),rgba(0,0,0,.5)),url(/dist/img/background_header2.png);background-position:50%;background-size:cover;background-repeat:no-repeat;background-attachment:fixed}.services__boxes{justify-content:center;padding:.5em 1em}.service__box,.services__boxes{display:flex;align-items:center;flex-direction:column}.service__box{justify-content:space-between;background:hsla(0,0%,100%,.1);text-align:center;border-radius:10px;padding:1em .5em;transition:outline,box-shadow 1s;margin:1em 0 .5em}.service__box:hover{box-shadow:10px 10px 30px hsla(0,0%,100%,.3)}.service__tittle{font-size:1rem;font-family:Audiowide,sans-serif;text-transform:uppercase;color:grey;border-bottom:1px solid #f5f5f5;margin-bottom:2em;padding:.5em 0}.service__text{font-size:.8rem;padding:.5em}.opinions{background-color:#000;color:#f5f5f5;padding:1em 0;border-top:1px solid #f5f5f5}.opinions__box{padding:.5em 1em}.opinion__box{margin-top:.5em;position:relative;border-top:1px solid wheat;border-bottom:1px solid wheat}.opinion__name{background-color:#000;z-index:1;position:absolute;top:-15px;left:10px;font-size:.8rem;padding:.5em 0;text-align:center}.opinion__text{text-align:center;font-size:.7rem;padding:1em}.opinion__stars{position:absolute;background-color:#000;top:-15px;left:180px;color:#daa520;text-align:center;font-size:.8rem;padding:.5em 0}@media (min-width:390px){.header__tittle{font-size:1rem}.hero__info{padding:.4em}.hero__text{font-size:.9rem}.hero__img{width:250px;height:200px}.hero .fa-phone{font-size:.7rem}.info__icon{font-size:1.2rem}.info__header{font-size:.8rem}.review__tittle{font-size:.9rem}.review__text{margin-left:2em;font-size:1rem}.review a{margin-right:1em}.review a img{top:-15px;left:-18px;width:55px;height:50px}.about__title{font-size:1.2rem}.about__img{width:300px}.about__list--item{padding:.3em 0;font-size:.8rem}.about i{padding:0 .5em}.opinion__name{top:-17px;left:10px;font-size:.9rem}.opinion__text{font-size:.8rem}.opinion__stars{top:-17px;left:220px;font-size:.9rem}}@media (min-width:430px){.about__img{width:350px}.about__list--item{font-size:1rem}.service__tittle{font-size:1.2rem}.service__text{font-size:1rem}.opinion__stars{top:-17px;left:260px}}@media (min-width:480px){.opinion__stars{top:-18px;left:300px}}@media (min-width:576px){.header__tittle{font-size:1.6rem}.review__text,.review__tittle{font-size:1.2rem}.review a img{top:-13px;left:-15px}.hero .fa-phone,.hero__text{font-size:1.2rem}.info__icon{font-size:1.6rem}.info__header{font-size:1.2rem}.about__title{font-size:1.6rem}.about__img{width:400px}.about__list--item{font-size:1.3rem}.logo{height:100%}.logo__img{width:70px}.logo__img,.logo__img--toyota{height:70px}.logo__img--nissan{width:75px;height:55px}.opinion__name{top:-18px;left:10px;font-size:1rem}.opinion__text{font-size:.9rem}.opinion__stars{top:-19px;left:400px;font-size:1rem}}@media (min-width:670px){.about__title{font-size:2rem;padding:.2em .5em}.about__box{flex-direction:row;padding:.5em 1em}.about__img{width:300px}.about__list{padding:0 .5em}.about__list--item{padding:.1em 0;font-size:1rem}.about i{padding:0 .5em}.logo__img--nissan{width:80px;height:55px}.service__tittle{font-size:1.4rem}.service__text{font-size:1.2rem}.opinion__name{top:-19px;left:15px;font-size:1.1rem}.opinion__text{font-size:1rem}.opinion__stars{top:-20px;left:480px;font-size:1.1rem}}@media (min-width:768px){.header__tittle{font-size:2rem}.hero{height:70vh}.hero__img{width:350px;height:300px}.hero .fa-phone,.hero__text,.review__text,.review__tittle{font-size:1.6rem}.review a img{top:-11px;left:-13px;width:65px;height:55px}.info__header,.info__icon{font-size:1.6rem}.about__title{font-size:2rem;padding:.2em .5em}.about__box{padding:.5em 1em}.about__img{width:350px}.about__list--item{font-size:1.3rem}.services{background-image:linear-gradient(45deg,rgba(0,0,0,.4),rgba(0,0,0,.5)),url(/dist/img/background_header2.png);background-position:50%;background-size:cover;background-repeat:no-repeat;background-attachment:fixed}.services__boxes{display:flex;justify-content:space-evenly;align-items:center;flex-direction:row;flex-wrap:wrap}.services .service__tittle{font-family:Audiowide,sans-serif;text-transform:uppercase;font-size:1.3rem;color:grey;border-bottom:1px solid #f5f5f5;padding:.5em 0}.services .service__text{font-size:1rem;text-transform:capitalize}.services .service__box{display:flex;justify-content:space-between;align-items:center;flex-direction:column;background:hsla(0,0%,100%,.1);text-align:center;width:200px;height:300px;border:none;border-radius:10px;transition:.3s}.services .service__box:hover{box-shadow:5px 5px 30px hsla(0,0%,100%,.3)}.services .service__boxes--bottom,.services .service__boxes--top{width:100%;display:flex;justify-content:space-evenly;align-items:center;flex-direction:row;margin:1em 0}.opinion__name{top:-20px;left:15px;font-size:1.2rem}.opinion__text{font-size:1.1rem}.opinion__stars{top:-22px;left:520px;font-size:1.2rem}}@media (min-width:900px){.about__box{padding:.5em 1em}.about__img{width:450px}.about__list--item{margin-bottom:.5em;font-size:1.4rem}.opinion__stars{top:-22px;left:680px}}@media (min-width:992px){.hero{height:auto}.hero__img{width:450px;height:400px}.review__tittle{font-size:2rem}.review__text{font-size:1.6rem}.review a img{top:-16px;left:-20px;width:75px;height:65px}.info__header,.info__icon{font-size:1.6rem}.about__title{font-size:2.2rem}.about__box{padding:.5em 1em}.about__img{width:500px}.about__list--item{margin-bottom:1em;font-size:1.6rem}.services{background-image:linear-gradient(45deg,rgba(0,0,0,.4),rgba(0,0,0,.5)),url(/dist/img/background_header2.png);background-position:50%;background-size:cover;background-repeat:no-repeat;background-attachment:fixed}.services__boxes{display:flex;justify-content:space-evenly;align-items:center;flex-direction:row;flex-wrap:wrap;padding:1em}.services .service__tittle{font-family:Audiowide,sans-serif;text-transform:uppercase;font-size:1.6rem;color:grey;border-bottom:1px solid #f5f5f5;padding:.5em 0}.services .service__text{font-size:1.1rem;text-transform:capitalize}.services .service__box{display:flex;justify-content:space-between;align-items:center;flex-direction:column;background:hsla(0,0%,100%,.1);text-align:center;width:250px;height:350px;border:none;border-radius:10px;padding:1em .5em;transition:.3s}.services .service__box:hover{box-shadow:5px 5px 30px hsla(0,0%,100%,.3)}.services .service__boxes--bottom,.services .service__boxes--top{width:100%;display:flex;justify-content:space-evenly;align-items:center;flex-direction:row;margin:2em 0}.opinion__box{margin-right:1em;height:160px}.opinion__name{top:-21px;left:15px;font-size:1.2rem}.opinion__text{margin:.3em auto;font-size:1.1rem}.opinion__stars{top:-24px;left:310px;font-size:1.2rem}}@media (min-width:1024px){.about__box{padding:.5em 1em;display:flex;justify-content:space-around;align-items:center;width:100%}.about__title{font-size:2.5rem}.about__box{padding:1em}.about__img{width:550px}.about__list--item{font-size:1.6rem}.opinion__stars{top:-23px}}@media (min-width:1200px){.header__tittle{font-size:2rem}.header__text{font-size:1.6rem}.hero{background-attachment:fixed;height:auto}.review__text{margin-left:3em}.review__tittle{font-size:2rem}.review a img{top:-25px;left:-25px;width:120px;height:90px}.review__text{font-size:2rem}.info__icon{font-size:3rem}.info__header{font-size:2rem}.about__box{padding:.5em 1em;display:flex;justify-content:space-around;align-items:center;width:100%}.about__title{font-size:2.5rem}.about__box{padding:1em}.about__img{width:650px}.about__list--item{font-size:1.6rem}.logo__img{width:100px}.logo__img,.logo__img--toyota{height:100px}.logo__img--nissan{width:130px;height:85px}.opinion__name{top:-21px;left:15px;font-size:1.4rem}.opinion__text{margin:.5em auto;font-size:1.2rem}.opinion__stars{top:-26px;left:390px;font-size:1.4rem}}@media (min-width:1400px){.header__tittle{font-size:3rem}.hero__text{font-size:2rem;padding:.5em}.hero__lamp2{left:630px;top:210px}.hero__lamp3{left:660px;top:210px}.hero__lamp4{left:853px;top:213px}.about__title{font-size:3rem}.about__img{width:750px}.about__list--item{font-size:2rem}.service__tittle{font-family:Audiowide,sans-serif;text-transform:uppercase;font-size:1.6rem;color:grey;border-bottom:1px solid #f5f5f5;padding:.5em 0}.service__text{font-size:1.1rem;text-transform:capitalize}.service__box{display:flex;justify-content:space-between;align-items:center;flex-direction:column;background:hsla(0,0%,100%,.1);text-align:center;width:250px;height:350px;border:none;border-radius:10px;padding:1em .5em;transition:.3s}.opinion__name{top:-28px;left:20px;font-size:1.6rem}.opinion__text{margin:1em auto;font-size:1.4rem}.opinion__stars{top:-28px;left:600px;font-size:1.6rem}}@media (min-width:2000px){.header__tittle{font-size:3rem}.hero__text{font-size:2rem;padding:.5em}.hero__lamp2{left:630px;top:210px}.hero__lamp3{left:660px;top:210px}.hero__lamp4{left:853px;top:213px}.about__title{font-size:3rem}.about__img{width:750px}.about__list--item{font-size:2rem}.service__tittle{font-family:Audiowide,sans-serif;text-transform:uppercase;font-size:1.6rem;color:grey;border-bottom:1px solid #f5f5f5;padding:.5em 0}.service__text{font-size:1.1rem;text-transform:capitalize}.service__box{display:flex;justify-content:space-between;align-items:center;flex-direction:column;background:hsla(0,0%,100%,.1);text-align:center;width:250px;height:350px;border:none;border-radius:10px;padding:1em .5em;transition:.3s}.opinion__name{top:-28px;left:20px;font-size:1.6rem}.opinion__text{margin:1em auto;font-size:1.4rem}.opinion__stars{top:-28px;left:1100px;font-size:1.6rem}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9iYXNlLnNjc3MiLCJzdHlsZS5jc3MiLCJfY29tcG9uZW50cy5zY3NzIiwiX2V4dHJhc21hbGwuc2NzcyIsIl9zbWFsbC5zY3NzIiwiX21lZGl1bS5zY3NzIiwiX2xhcmdlLnNjc3MiLCJfZXh0cmFsYXJnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUdJLFNBQUEsQUFDQSxVQUFBLEFBQ0EscUJBQUEsQ0NFSixBRENBLEtBQ0ksc0JBQUEsQ0NFSixBRENBLEtBQ0ksOEJBQUEsQUFDQSxvQkFBQSxBQUNBLGlCQUFBLEFBQ0EsZUFBQSxDQ0VKLEFDbEJBLFNBQ0ksa0NBQUEsQUFDQSxhQUFBLENEcUJKLEFFcEJBLFFBQ0ksY0FBQSxBQUNBLDREQUFBLEFBQ0Esa0JBQUEsQUFDQSxjQUFBLENGdUJKLEFFckJJLGdCQUNJLGlDQUFBLEFBQ0EsZUFBQSxDRnVCUixBRW5CSSxjQUNJLFNBQUEsQ0ZxQlIsQUVoQkEsTUFFSSxrQkFBQSxBQUlBLHNCQUFBLEFBQ0EsNEdBQUEsQUFFQSx3QkFBQSxBQUNBLHNCQUFBLEFBQ0EsNEJBQUEsQUFDQSw2QkFBQSxBQUVBLFlBQUEsQUFDQSxVQUFBLEFBQ0EsZUFBQSxDRmlCSixBRWZJLGtCQWZBLGFBQUEsQUFDQSw4QkFBQSxBQUNBLG1CQUFBLEFBUUEsVUFBQSxDQUtBLEFGdUJKLFlFdEJRLGFBQUEsQUFJQSxrQkFBQSxDRmtCUixBRWRJLFlBQ0ksY0FBQSxBQUNBLGVBQUEsQ0ZnQlIsQUVkUSxzQkFDSSxpQkFBQSxDRmdCWixBRVZJLFdBQ0ksWUFBQSxBQUNBLGFBQUEsQUFDQSxVQUFBLENGWVIsQUVUSSxtREFJSSxXQUFBLEFBQ0EsVUFBQSxBQUNBLGtCQUFBLEFBQ0EsV0FBQSxBQUNBLFlBQUEsQUFDQSxzQkFBQSxBQUNBLGtCQUFBLEFBQ0EsdUNBQUEsQUFFQSxVQUFBLEFBRUEsa0JBQUEsQUFFQSx5Q0FBQSxDRktSLEFFQUksYUFDSSxXQUFBLEFBQ0EsU0FBQSxDRkVSLEFFQ0ksYUFDSSxX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bjBCTSxjQUVJLGNBQUEsQ05vMEJWLEFNOXpCTSxZQUNJLFdBQUEsQ05nMEJWLEFNMXpCVSxtQkFDSSxjQUFBLENONHpCZCxBTXR6Qk0saUJBQ0ksaUNBQUEsQUFDQSx5QkFBQSxBQUNBLGlCQUFBLEFBQ0EsV0FBQSxBQUNBLGdDQUFBLEFBQ0EsY0FBQSxDTnd6QlYsQU1yekJNLGVBQ0ksaUJBQUEsQUFDQSx5QkFBQSxDTnV6QlYsQU1wekJNLGNBQ0ksYUFBQSxBQUNBLDhCQUFBLEFBQ0EsbUJBQUEsQUFDQSxzQkFBQSxBQUNBLDhCQUFBLEFBQ0Esa0JBQUEsQUFDQSxZQUFBLEFBQ0EsYUFBQSxBQUNBLFlBQUEsQUFDQSxtQkFBQSxBQUNBLGlCQUFBLEFBQ0EsY0FBQSxDTnN6QlYsQU01eUJNLGVBQ0ksVUFBQSxBQUNBLFVBQUEsQUFDQSxnQkFBQSxDTjh5QlYsQU0zeUJNLGVBQ0ksZ0JBQUEsQUFDQSxnQkFBQSxDTjZ5QlYsQU0xeUJNLGdCQUNJLFVBQUEsQUFDQSxZQUFBLEFBQ0EsZ0JBQUEsQ040eUJWLENBQ0YiLCJmaWxlIjoic3R5bGUubWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIiosXHJcbio6OmFmdGVyLFxyXG4qOjpiZWZvcmUge1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuXHJcbmh0bWwge1xyXG4gICAgc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XHJcbn1cclxuXHJcbmJvZHkge1xyXG4gICAgZm9udC1mYW1pbHk6IFwiUm9ib3RvIEZsZXhcIiwgc2VyaWY7XHJcbiAgICBmb250LXdlaWdodDogbGlnaHRlcjtcclxuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xyXG4gICAgbWluLXdpZHRoOiAzMjBweDtcclxufSIsIkBjaGFyc2V0IFwiVVRGLThcIjtcbiosXG4qOjphZnRlcixcbio6OmJlZm9yZSB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuaHRtbCB7XG4gIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoO1xufVxuXG5ib2R5IHtcbiAgZm9udC1mYW1pbHk6IFwiUm9ib3RvIEZsZXhcIiwgc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xuICBmb250LXNpemU6IDEuNnJlbTtcbiAgbWluLXdpZHRoOiAzMjBweDtcbn1cblxuLnNlY3Rpb24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOTE0KTtcbiAgY29sb3I6IHdoaXRlc21va2U7XG59XG5cbi5oZWFkZXIge1xuICBjb2xvcjogd2hpdGVzbW9rZTtcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCByZ2IoMCwgMCwgMCksIHJnYmEoMCwgMCwgMCwgMC45KSk7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgcGFkZGluZzogMC4zZW0gMDtcbn1cbi5oZWFkZXJfX3RpdHRsZSB7XG4gIGZvbnQtZmFtaWx5OiBcIkF1ZGlvd2lkZVwiLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDAuOXJlbTtcbn1cbi5oZWFkZXJfX3NwYW4ge1xuICBjb2xvcjogcmVkO1xufVxuXG4uaGVybyB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoNDVkZWcsIHJnYmEoMCwgMCwgMCwgMC40KSwgcmdiYSgwLCAwLCAwLCAwLjUpKSwgdXJsKFwiL2Rpc3QvaW1nL2JhY2tncm91bmRfaGVhZGVyMi5wbmdcIik7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBzY3JvbGw7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDUwdmg7XG4gIHotaW5kZXg6IDI7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG4uaGVyb19faW5mbyB7XG4gIHBhZGRpbmc6IDAuMmVtO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmhlcm9fX3RleHQge1xuICBjb2xvcjogd2hpdGVzbW9rZTtcbiAgZm9udC1zaXplOiAwLjZyZW07XG59XG4uaGVyb19fdGV4dCAuZmEtcGhvbmUge1xuICBtYXJnaW4tcmlnaHQ6IDAuNGVtO1xufVxuLmhlcm9fX2ltZyB7XG4gIHdpZHRoOiAxNTBweDtcbiAgaGVpZ2h0OiAxMjVweDtcbiAgb3BhY2l0eTogMC41O1xufVxuLmhlcm9fX2xhbXAsIC5oZXJvX19sYW1wMiwgLmhlcm9fX2xhbXAzLCAuaGVyb19fbGFtcDQge1xuICBsZWZ0OiA4ODVweDtcbiAgdG9wOiAyMTJweDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogMjNweDtcbiAgaGVpZ2h0OiAyM3B4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBib3gtc2hhZG93OiAwcHggMHB4IDUwcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpO1xuICBvcGFjaXR5OiAwO1xuICBmaWx0ZXI6IGJsdXIoMjBweCk7XG4gIGFuaW1hdGlvbjogbGlnaHRVcCAxcyBlYXNlLWluLW91dCAwcyAzIGFsdGVybmF0ZTtcbn1cbi5oZXJvX19sYW1wMiB7XG4gIGxlZnQ6IDEzMHB4O1xuICB0b3A6IDEwMHB4O1xufVxuLmhlcm9fX2xhbXAzIHtcbiAgbGVmdDogMjM1cHg7XG4gIHRvcDogMTAwcHg7XG59XG4uaGVyb19fbGFtcDQge1xuICBsZWZ0OiAyNTVweDtcbiAgdG9wOiAxMDBweDtcbn1cblxuQGtleWZyYW1lcyBsaWdodFVwIHtcbiAgMCUge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgZmlsdGVyOiBibHVyKDIwcHgpO1xuICAgIC8qIE1vY25vIHJvem15dGUgbmEgcG9jesSFdGt1ICovXG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1MHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTtcbiAgICAvKiBTxYJhYm8gd2lkb2N6bnkgY2llxYQgKi9cbiAgfVxuICA1MCUge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgZmlsdGVyOiBibHVyKDVweCk7XG4gICAgLyogTW5pZWpzemUgcm96bXljaWUgKi9cbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDEwMHB4IHJnYigyNTUsIDI1NSwgMjU1KTtcbiAgICAvKiDFmndpYXTFgm8gc3RhamUgc2nEmSBtb2NuaWVqc3plICovXG4gIH1cbiAgMTAwJSB7XG4gICAgb3BhY2l0eTogMDtcbiAgICBmaWx0ZXI6IGJsdXIoMjBweCk7XG4gICAgLyogUm96bXljaWUgd3JhY2EgKi9cbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDUwcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpO1xuICAgIC8qIFptbmllanN6b25lIMWbd2lhdMWCbyAqL1xuICB9XG59XG4uaW5mb19faWNvbiB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbiAgcGFkZGluZzogMC41ZW0gMDtcbn1cbi5pbmZvX19jYXJkcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB3aWR0aDogMTAwdnc7XG59XG4uaW5mb19fY2FyZCB7XG4gIGNvbG9yOiB3aGl0ZXNtb2tlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB3aWR0aDogMjAwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgcGFkZGluZzogMC41ZW0gMWVtO1xufVxuLmluZm9fX2hlYWRlciB7XG4gIGZvbnQtc2l6ZTogMC43cmVtO1xuICBjb2xvcjogd2hpdGU7XG59XG5cbi5pbmZvX19jYXJkOm50aC1jaGlsZCgxKSB7XG4gIG9wYWNpdHk6IDA7XG4gIGFuaW1hdGlvbjogZmFkZUluIDJzIGVhc2Utb3V0IGZvcndhcmRzO1xuICAvKiBLYXJ0YSAxIHBvamF3aWEgc2nEmSBwbyAyIHNla3VuZGFjaCAqL1xufVxuXG4uaW5mb19fY2FyZDpudGgtY2hpbGQoMikge1xuICBvcGFjaXR5OiAwO1xuICBhbmltYXRpb246IGZhZGVJbiAycyBlYXNlLW91dCBmb3J3YXJkcztcbiAgYW5pbWF0aW9uLWRlbGF5OiAxcztcbiAgLyogS2FydGEgMiBwb2phd2lhIHNpxJkgcG8gNCBzZWt1bmRhY2ggKi9cbn1cblxuLmluZm9fX2NhcmQ6bnRoLWNoaWxkKDMpIHtcbiAgb3BhY2l0eTogMDtcbiAgYW5pbWF0aW9uOiBmYWRlSW4gMnMgZWFzZS1vdXQgZm9yd2FyZHM7XG4gIGFuaW1hdGlvbi1kZWxheTogMnM7XG4gIC8qIEthcnRhIDMgcG9qYXdpYSBzacSZIHBvIDYgc2VrdW5kYWNoICovXG59XG5cbkBrZXlmcmFtZXMgZmFkZUluIHtcbiAgMCUge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgLyogRWZla3QgcHJ6ZXN1bmnEmWNpYSAqL1xuICB9XG4gIDEwMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cbi5yZXZpZXcge1xuICBwYWRkaW5nOiAwLjVlbSAxZW07XG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbn1cbi5yZXZpZXdfX3RleHQge1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIG1hcmdpbi1sZWZ0OiAyZW07XG59XG4ucmV2aWV3X190aXR0bGUge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtZmFtaWx5OiBcIkF1ZGlvd2lkZVwiLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDAuNnJlbTtcbiAgbWFyZ2luLXJpZ2h0OiAxZW07XG59XG4ucmV2aWV3X19ib3gge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4ucmV2aWV3X19ib3gsIC5yZXZpZXdfX2luZm8ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgZm9udC1zaXplOiAxLjJyZW07XG59XG4ucmV2aWV3IGEge1xuICBtYXJnaW4tcmlnaHQ6IDFlbTtcbn1cbi5yZXZpZXcgYSBpbWcge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTEycHg7XG4gIGxlZnQ6IC0yMHB4O1xuICB3aWR0aDogNDVweDtcbiAgaGVpZ2h0OiA0MHB4O1xufVxuLnJldmlld19faW5mbyB7XG4gIG1hcmdpbi1yaWdodDogMmVtO1xufVxuXG4uYWJvdXRfX3RpdGxlIHtcbiAgZm9udC1mYW1pbHk6IFwiQXVkaW93aWRlXCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xuICBwYWRkaW5nOiAwLjNlbSAwLjVlbTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHdoaXRlO1xufVxuLmFib3V0X19ib3gge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgd2lkdGg6IDEwMCU7XG59XG4uYWJvdXRfX2ltZyB7XG4gIHdpZHRoOiAyNTBweDtcbiAgbWFyZ2luLXRvcDogMC41ZW07XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgYm94LXNoYWRvdzogNXB4IDVweCAxMHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbn1cbi5hYm91dF9fbGlzdCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IDAuNWVtIDA7XG59XG4uYWJvdXRfX2xpc3QtLWl0ZW0ge1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgbWFyZ2luLWJvdHRvbTogMC41ZW07XG59XG5cbi5sb2dvIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XG4gIGhlaWdodDogNTBweDtcbn1cbi5sb2dvX19ib3gge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5sb2dvX19pbWcge1xuICB3aWR0aDogNTBweDtcbiAgaGVpZ2h0OiA1MHB4O1xufVxuLmxvZ29fX2ltZy0tYm13IHtcbiAgaGVpZ2h0OiA1NXB4O1xufVxuLmxvZ29fX2ltZy0tdG95b3RhIHtcbiAgaGVpZ2h0OiA0NXB4O1xufVxuLmxvZ29fX2ltZy0tbmlzc2FuIHtcbiAgaGVpZ2h0OiAzNXB4O1xufVxuXG4uc2VydmljZXMge1xuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoNDVkZWcsIHJnYmEoMCwgMCwgMCwgMC40KSwgcmdiYSgwLCAwLCAwLCAwLjUpKSwgdXJsKFwiL2Rpc3QvaW1nL2JhY2tncm91bmRfaGVhZGVyMi5wbmdcIik7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDtcbn1cbi5zZXJ2aWNlc19fYm94ZXMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgcGFkZGluZzogMC41ZW0gMWVtO1xufVxuXG4uc2VydmljZV9fYm94IHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgcGFkZGluZzogMWVtIDAuNWVtO1xuICB0cmFuc2l0aW9uOiBvdXRsaW5lLCBib3gtc2hhZG93IDFzO1xuICBtYXJnaW46IDFlbSAwIDAuNWVtIDA7XG59XG4uc2VydmljZV9fYm94OmhvdmVyIHtcbiAgYm94LXNoYWRvdzogMTBweCAxMHB4IDMwcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xufVxuLnNlcnZpY2VfX3RpdHRsZSB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbiAgZm9udC1mYW1pbHk6IFwiQXVkaW93aWRlXCIsIHNhbnMtc2VyaWY7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGNvbG9yOiBncmV5O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgd2hpdGVzbW9rZTtcbiAgbWFyZ2luLWJvdHRvbTogMmVtO1xuICBwYWRkaW5nOiAwLjVlbSAwO1xufVxuLnNlcnZpY2VfX3RleHQge1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgcGFkZGluZzogMC41ZW07XG59XG5cbi5vcGluaW9ucyB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigwLCAwLCAwKTtcbiAgY29sb3I6IHdoaXRlc21va2U7XG4gIHBhZGRpbmc6IDFlbSAwO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgd2hpdGVzbW9rZTtcbn1cbi5vcGluaW9uc19fYm94IHtcbiAgcGFkZGluZzogMC41ZW0gMWVtO1xufVxuXG4ub3Bpbmlvbl9fYm94IHtcbiAgbWFyZ2luLXRvcDogMC41ZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHdoZWF0O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgd2hlYXQ7XG59XG4ub3Bpbmlvbl9fbmFtZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigwLCAwLCAwKTtcbiAgei1pbmRleDogMjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IC0xNXB4O1xuICBsZWZ0OiAxMHB4O1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgcGFkZGluZzogMC41ZW0gMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLm9waW5pb25fX3RleHQge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMC43cmVtO1xuICBwYWRkaW5nOiAxZW07XG59XG4ub3Bpbmlvbl9fc3RhcnMge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigwLCAwLCAwKTtcbiAgdG9wOiAtMTVweDtcbiAgbGVmdDogMTgwcHg7XG4gIGNvbG9yOiBnb2xkZW5yb2Q7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1zaXplOiAwLjhyZW07XG4gIHBhZGRpbmc6IDAuNWVtIDA7XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAzOTBweCkge1xuICAuaGVhZGVyX190aXR0bGUge1xuICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgfVxuICAuaGVyb19faW5mbyB7XG4gICAgcGFkZGluZzogMC40ZW07XG4gIH1cbiAgLmhlcm9fX3RleHQge1xuICAgIGZvbnQtc2l6ZTogMC45cmVtO1xuICB9XG4gIC5oZXJvX19pbWcge1xuICAgIHdpZHRoOiAyNTBweDtcbiAgICBoZWlnaHQ6IDIwMHB4O1xuICB9XG4gIC5oZXJvIC5mYS1waG9uZSB7XG4gICAgZm9udC1zaXplOiAwLjdyZW07XG4gIH1cbiAgLmluZm9fX2ljb24ge1xuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICB9XG4gIC5pbmZvX19oZWFkZXIge1xuICAgIGZvbnQtc2l6ZTogMC44cmVtO1xuICB9XG4gIC5yZXZpZXdfX3RpdHRsZSB7XG4gICAgZm9udC1zaXplOiAwLjlyZW07XG4gIH1cbiAgLnJldmlld19fdGV4dCB7XG4gICAgbWFyZ2luLWxlZnQ6IDJlbTtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIH1cbiAgLnJldmlldyBhIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDFlbTtcbiAgfVxuICAucmV2aWV3IGEgaW1nIHtcbiAgICB0b3A6IC0xNXB4O1xuICAgIGxlZnQ6IC0xOHB4O1xuICAgIHdpZHRoOiA1NXB4O1xuICAgIGhlaWdodDogNTBweDtcbiAgfVxuICAuYWJvdXRfX3RpdGxlIHtcbiAgICBmb250LXNpemU6IDEuMnJlbTtcbiAgfVxuICAuYWJvdXRfX2ltZyB7XG4gICAgd2lkdGg6IDMwMHB4O1xuICB9XG4gIC5hYm91dF9fbGlzdC0taXRlbSB7XG4gICAgcGFkZGluZzogMC4zZW0gMDtcbiAgICBmb250LXNpemU6IDAuOHJlbTtcbiAgfVxuICAuYWJvdXQgaSB7XG4gICAgcGFkZGluZzogMCAwLjVlbTtcbiAgfVxuICAub3Bpbmlvbl9fbmFtZSB7XG4gICAgdG9wOiAtMTdweDtcbiAgICBsZWZ0OiAxMHB4O1xuICAgIGZvbnQtc2l6ZTogMC45cmVtO1xuICB9XG4gIC5vcGluaW9uX190ZXh0IHtcbiAgICBmb250LXNpemU6IDAuOHJlbTtcbiAgfVxuICAub3Bpbmlvbl9fc3RhcnMge1xuICAgIHRvcDogLTE3cHg7XG4gICAgbGVmdDogMjIwcHg7XG4gICAgZm9udC1zaXplOiAwLjlyZW07XG4gIH1cbn1cbkBtZWRpYSAobWluLXdpZHRoOiA0MzBweCkge1xuICAuYWJvdXRfX2ltZyB7XG4gICAgd2lkdGg6IDM1MHB4O1xuICB9XG4gIC5hYm91dF9fbGlzdC0taXRlbSB7XG4gICAgZm9udC1zaXplOiAxcmVtO1xuICB9XG4gIC5zZXJ2aWNlX190aXR0bGUge1xuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICB9XG4gIC5zZXJ2aWNlX190ZXh0IHtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIH1cbiAgLm9waW5pb25fX3N0YXJzIHtcbiAgICB0b3A6IC0xN3B4O1xuICAgIGxlZnQ6IDI2MHB4O1xuICB9XG59XG5AbWVkaWEgKG1pbi13aWR0aDogNDgwcHgpIHtcbiAgLm9waW5pb25fX3N0YXJzIHtcbiAgICB0b3A6IC0xOHB4O1xuICAgIGxlZnQ6IDMwMHB4O1xuICB9XG59XG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcbiAgLmhlYWRlcl9fdGl0dGxlIHtcbiAgICBmb250LXNpemU6IDEuNnJlbTtcbiAgfVxuICAucmV2aWV3X190aXR0bGUge1xuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICB9XG4gIC5yZXZpZXdfX3RleHQge1xuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICB9XG4gIC5yZXZpZXcgYSBpbWcge1xuICAgIHRvcDogLTEzcHg7XG4gICAgbGVmdDogLTE1cHg7XG4gIH1cbiAgLmhlcm9fX3RleHQge1xuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICB9XG4gIC5oZXJvIC5mYS1waG9uZSB7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG4gIH1cbiAgLmluZm9fX2ljb24ge1xuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xuICB9XG4gIC5pbmZvX19oZWFkZXIge1xuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICB9XG4gIC5hYm91dF9fdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xuICB9XG4gIC5hYm91dF9faW1nIHtcbiAgICB3aWR0aDogNDAwcHg7XG4gIH1cbiAgLmFib3V0X19saXN0LS1pdGVtIHtcbiAgICBmb250LXNpemU6IDEuM3JlbTtcbiAgfVxuICAubG9nbyB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG4gIC5sb2dvX19pbWcge1xuICAgIHdpZHRoOiA3MHB4O1xuICAgIGhlaWdodDogNzBweDtcbiAgfVxuICAubG9nb19faW1nLS10b3lvdGEge1xuICAgIGhlaWdodDogNzBweDtcbiAgfVxuICAubG9nb19faW1nLS1uaXNzYW4ge1xuICAgIHdpZHRoOiA3NXB4O1xuICAgIGhlaWdodDogNTVweDtcbiAgfVxuICAub3Bpbmlvbl9fbmFtZSB7XG4gICAgdG9wOiAtMThweDtcbiAgICBsZWZ0OiAxMHB4O1xuICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgfVxuICAub3Bpbmlvbl9fdGV4dCB7XG4gICAgZm9udC1zaXplOiAwLjlyZW07XG4gIH1cbiAgLm9waW5pb25fX3N0YXJzIHtcbiAgICB0b3A6IC0xOXB4O1xuICAgIGxlZnQ6IDQwMHB4O1xuICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgfVxufVxuQG1lZGlhIChtaW4td2lkdGg6IDY3MHB4KSB7XG4gIC5hYm91dF9fdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICBwYWRkaW5nOiAwLjJlbSAwLjVlbTtcbiAgfVxuICAuYWJvdXRfX2JveCB7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBwYWRkaW5nOiAwLjVlbSAxZW07XG4gIH1cbiAgLmFib3V0X19pbWcge1xuICAgIHdpZHRoOiAzMDBweDtcbiAgfVxuICAuYWJvdXRfX2xpc3Qge1xuICAgIHBhZGRpbmc6IDAgMC41ZW07XG4gIH1cbiAgLmFib3V0X19saXN0LS1pdGVtIHtcbiAgICBwYWRkaW5nOiAwLjFlbSAwO1xuICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgfVxuICAuYWJvdXQgaSB7XG4gICAgcGFkZGluZzogMCAwLjVlbTtcbiAgfVxuICAubG9nb19faW1nLS1uaXNzYW4ge1xuICAgIHdpZHRoOiA4MHB4O1xuICAgIGhlaWdodDogNTVweDtcbiAgfVxuICAuc2VydmljZV9fdGl0dGxlIHtcbiAgICBmb250LXNpemU6IDEuNHJlbTtcbiAgfVxuICAuc2VydmljZV9fdGV4dCB7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG4gIH1cbiAgLm9waW5pb25fX25hbWUge1xuICAgIHRvcDogLTE5cHg7XG4gICAgbGVmdDogMTVweDtcbiAgICBmb250LXNpemU6IDEuMXJlbTtcbiAgfVxuICAub3Bpbmlvbl9fdGV4dCB7XG4gICAgZm9udC1zaXplOiAxcmVtO1xuICB9XG4gIC5vcGluaW9uX19zdGFycyB7XG4gICAgdG9wOiAtMjBweDtcbiAgICBsZWZ0OiA0ODBweDtcbiAgICBmb250LXNpemU6IDEuMXJlbTtcbiAgfVxufVxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gIC5oZWFkZXJfX3RpdHRsZSB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG4gIC5oZXJvIHtcbiAgICBoZWlnaHQ6IDcwdmg7XG4gIH1cbiAgLmhlcm9fX2ltZyB7XG4gICAgd2lkdGg6IDM1MHB4O1xuICAgIGhlaWdodDogMzAwcHg7XG4gIH1cbiAgLmhlcm9fX3RleHQge1xuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xuICB9XG4gIC5oZXJvIC5mYS1waG9uZSB7XG4gICAgZm9udC1zaXplOiAxLjZyZW07XG4gIH1cbiAgLnJldmlld19fdGl0dGxlIHtcbiAgICBmb250LXNpemU6IDEuNnJlbTtcbiAgfVxuICAucmV2aWV3X190ZXh0IHtcbiAgICBmb250LXNpemU6IDEuNnJlbTtcbiAgfVxuICAucmV2aWV3IGEgaW1nIHtcbiAgICB0b3A6IC0xMXB4O1xuICAgIGxlZnQ6IC0xM3B4O1xuICAgIHdpZHRoOiA2NXB4O1xuICAgIGhlaWdodDogNTVweDtcbiAgfVxuICAuaW5mb19faWNvbiB7XG4gICAgZm9udC1zaXplOiAxLjZyZW07XG4gIH1cbiAgLmluZm9fX2hlYWRlciB7XG4gICAgZm9udC1zaXplOiAxLjZyZW07XG4gIH1cbiAgLmFib3V0X190aXRsZSB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICAgIHBhZGRpbmc6IDAuMmVtIDAuNWVtO1xuICB9XG4gIC5hYm91dF9fYm94IHtcbiAgICBwYWRkaW5nOiAwLjVlbSAxZW07XG4gIH1cbiAgLmFib3V0X19pbWcge1xuICAgIHdpZHRoOiAzNTBweDtcbiAgfVxuICAuYWJvdXRfX2xpc3QtLWl0ZW0ge1xuICAgIGZvbnQtc2l6ZTogMS4zcmVtO1xuICB9XG4gIC5zZXJ2aWNlcyB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCByZ2JhKDAsIDAsIDAsIDAuNCksIHJnYmEoMCwgMCwgMCwgMC41KSksIHVybChcIi9kaXN0L2ltZy9iYWNrZ3JvdW5kX2hlYWRlcjIucG5nXCIpO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDtcbiAgfVxuICAuc2VydmljZXNfX2JveGVzIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gIH1cbiAgLnNlcnZpY2VzIC5zZXJ2aWNlX190aXR0bGUge1xuICAgIGZvbnQtZmFtaWx5OiBcIkF1ZGlvd2lkZVwiLCBzYW5zLXNlcmlmO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC1zaXplOiAxLjNyZW07XG4gICAgY29sb3I6IGdyZXk7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHdoaXRlc21va2U7XG4gICAgcGFkZGluZzogMC41ZW0gMDtcbiAgfVxuICAuc2VydmljZXMgLnNlcnZpY2VfX3RleHQge1xuICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcbiAgfVxuICAuc2VydmljZXMgLnNlcnZpY2VfX2JveCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIGhlaWdodDogMzAwcHg7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgdHJhbnNpdGlvbjogMC4zcztcbiAgfVxuICAuc2VydmljZXMgLnNlcnZpY2VfX2JveDpob3ZlciB7XG4gICAgYm94LXNoYWRvdzogNXB4IDVweCAzMHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcbiAgfVxuICAuc2VydmljZXMgLnNlcnZpY2VfX2JveGVzLS10b3AsIC5zZXJ2aWNlcyAuc2VydmljZV9fYm94ZXMtLWJvdHRvbSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgbWFyZ2luOiAxZW0gMDtcbiAgfVxuICAub3Bpbmlvbl9fbmFtZSB7XG4gICAgdG9wOiAtMjBweDtcbiAgICBsZWZ0OiAxNXB4O1xuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICB9XG4gIC5vcGluaW9uX190ZXh0IHtcbiAgICBmb250LXNpemU6IDEuMXJlbTtcbiAgfVxuICAub3Bpbmlvbl9fc3RhcnMge1xuICAgIHRvcDogLTIycHg7XG4gICAgbGVmdDogNTIwcHg7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG4gIH1cbn1cbkBtZWRpYSAobWluLXdpZHRoOiA5MDBweCkge1xuICAuYWJvdXRfX2JveCB7XG4gICAgcGFkZGluZzogMC41ZW0gMWVtO1xuICB9XG4gIC5hYm91dF9faW1nIHtcbiAgICB3aWR0aDogNDUwcHg7XG4gIH1cbiAgLmFib3V0X19saXN0LS1pdGVtIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcbiAgICBmb250LXNpemU6IDEuNHJlbTtcbiAgfVxuICAub3Bpbmlvbl9fc3RhcnMge1xuICAgIHRvcDogLTIycHg7XG4gICAgbGVmdDogNjgwcHg7XG4gIH1cbn1cbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xuICAuaGVybyB7XG4gICAgaGVpZ2h0OiBhdXRvO1xuICB9XG4gIC5oZXJvX19pbWcge1xuICAgIHdpZHRoOiA0NTBweDtcbiAgICBoZWlnaHQ6IDQwMHB4O1xuICB9XG4gIC5yZXZpZXdfX3RpdHRsZSB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG4gIC5yZXZpZXdfX3RleHQge1xuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xuICB9XG4gIC5yZXZpZXcgYSBpbWcge1xuICAgIHRvcDogLTE2cHg7XG4gICAgbGVmdDogLTIwcHg7XG4gICAgd2lkdGg6IDc1cHg7XG4gICAgaGVpZ2h0OiA2NXB4O1xuICB9XG4gIC5pbmZvX19pY29uIHtcbiAgICBmb250LXNpemU6IDEuNnJlbTtcbiAgfVxuICAuaW5mb19faGVhZGVyIHtcbiAgICBmb250LXNpemU6IDEuNnJlbTtcbiAgfVxuICAuYWJvdXRfX3RpdGxlIHtcbiAgICBmb250LXNpemU6IDIuMnJlbTtcbiAgfVxuICAuYWJvdXRfX2JveCB7XG4gICAgcGFkZGluZzogMC41ZW0gMWVtO1xuICB9XG4gIC5hYm91dF9faW1nIHtcbiAgICB3aWR0aDogNTAwcHg7XG4gIH1cbiAgLmFib3V0X19saXN0LS1pdGVtIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgZm9udC1zaXplOiAxLjZyZW07XG4gIH1cbiAgLnNlcnZpY2VzIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoNDVkZWcsIHJnYmEoMCwgMCwgMCwgMC40KSwgcmdiYSgwLCAwLCAwLCAwLjUpKSwgdXJsKFwiL2Rpc3QvaW1nL2JhY2tncm91bmRfaGVhZGVyMi5wbmdcIik7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICBiYWNrZ3JvdW5kLWF0dGFjaG1lbnQ6IGZpeGVkO1xuICB9XG4gIC5zZXJ2aWNlc19fYm94ZXMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBwYWRkaW5nOiAxZW07XG4gIH1cbiAgLnNlcnZpY2VzIC5zZXJ2aWNlX190aXR0bGUge1xuICAgIGZvbnQtZmFtaWx5OiBcIkF1ZGlvd2lkZVwiLCBzYW5zLXNlcmlmO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC1zaXplOiAxLjZyZW07XG4gICAgY29sb3I6IGdyZXk7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHdoaXRlc21va2U7XG4gICAgcGFkZGluZzogMC41ZW0gMDtcbiAgfVxuICAuc2VydmljZXMgLnNlcnZpY2VfX3RleHQge1xuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xuICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xuICB9XG4gIC5zZXJ2aWNlcyAuc2VydmljZV9fYm94IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB3aWR0aDogMjUwcHg7XG4gICAgaGVpZ2h0OiAzNTBweDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBwYWRkaW5nOiAxZW0gMC41ZW07XG4gICAgdHJhbnNpdGlvbjogMC4zcztcbiAgfVxuICAuc2VydmljZXMgLnNlcnZpY2VfX2JveDpob3ZlciB7XG4gICAgYm94LXNoYWRvdzogNXB4IDVweCAzMHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcbiAgfVxuICAuc2VydmljZXMgLnNlcnZpY2VfX2JveGVzLS10b3AsIC5zZXJ2aWNlcyAuc2VydmljZV9fYm94ZXMtLWJvdHRvbSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgbWFyZ2luOiAyZW0gMDtcbiAgfVxuICAub3Bpbmlvbl9fYm94IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDFlbTtcbiAgICBoZWlnaHQ6IDE2MHB4O1xuICB9XG4gIC5vcGluaW9uX19uYW1lIHtcbiAgICB0b3A6IC0yMXB4O1xuICAgIGxlZnQ6IDE1cHg7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG4gIH1cbiAgLm9waW5pb25fX3RleHQge1xuICAgIG1hcmdpbjogMC4zZW0gYXV0bztcbiAgICBmb250LXNpemU6IDEuMXJlbTtcbiAgfVxuICAub3Bpbmlvbl9fc3RhcnMge1xuICAgIHRvcDogLTI0cHg7XG4gICAgbGVmdDogMzEwcHg7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG4gIH1cbn1cbkBtZWRpYSAobWluLXdpZHRoOiAxMDI0cHgpIHtcbiAgLmFib3V0X19ib3gge1xuICAgIHBhZGRpbmc6IDAuNWVtIDFlbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLmFib3V0X190aXRsZSB7XG4gICAgZm9udC1zaXplOiAyLjVyZW07XG4gIH1cbiAgLmFib3V0X19ib3gge1xuICAgIHBhZGRpbmc6IDFlbSAxZW07XG4gIH1cbiAgLmFib3V0X19pbWcge1xuICAgIHdpZHRoOiA1NTBweDtcbiAgfVxuICAuYWJvdXRfX2xpc3QtLWl0ZW0ge1xuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xuICB9XG4gIC5vcGluaW9uX19zdGFycyB7XG4gICAgdG9wOiAtMjNweDtcbiAgfVxufVxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xuICAuaGVhZGVyX190aXR0bGUge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuICAuaGVhZGVyX190ZXh0IHtcbiAgICBmb250LXNpemU6IDEuNnJlbTtcbiAgfVxuICAuaGVybyB7XG4gICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDtcbiAgICBoZWlnaHQ6IGF1dG87XG4gIH1cbiAgLnJldmlld19fdGV4dCB7XG4gICAgbWFyZ2luLWxlZnQ6IDNlbTtcbiAgfVxuICAucmV2aWV3X190aXR0bGUge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuICAucmV2aWV3IGEgaW1nIHtcbiAgICB0b3A6IC0yNXB4O1xuICAgIGxlZnQ6IC0yNXB4O1xuICAgIHdpZHRoOiAxMjBweDtcbiAgICBoZWlnaHQ6IDkwcHg7XG4gIH1cbiAgLnJldmlld19fdGV4dCB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG4gIC5pbmZvX19pY29uIHtcbiAgICBmb250LXNpemU6IDNyZW07XG4gIH1cbiAgLmluZm9fX2hlYWRlciB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG4gIC5hYm91dF9fYm94IHtcbiAgICBwYWRkaW5nOiAwLjVlbSAxZW07XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC5hYm91dF9fdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMi41cmVtO1xuICB9XG4gIC5hYm91dF9fYm94IHtcbiAgICBwYWRkaW5nOiAxZW0gMWVtO1xuICB9XG4gIC5hYm91dF9faW1nIHtcbiAgICB3aWR0aDogNjUwcHg7XG4gIH1cbiAgLmFib3V0X19saXN0LS1pdGVtIHtcbiAgICBmb250LXNpemU6IDEuNnJlbTtcbiAgfVxuICAubG9nb19faW1nIHtcbiAgICB3aWR0aDogMTAwcHg7XG4gICAgaGVpZ2h0OiAxMDBweDtcbiAgfVxuICAubG9nb19faW1nLS10b3lvdGEge1xuICAgIGhlaWdodDogMTAwcHg7XG4gIH1cbiAgLmxvZ29fX2ltZy0tbmlzc2FuIHtcbiAgICB3aWR0aDogMTMwcHg7XG4gICAgaGVpZ2h0OiA4NXB4O1xuICB9XG4gIC5vcGluaW9uX19uYW1lIHtcbiAgICB0b3A6IC0yMXB4O1xuICAgIGxlZnQ6IDE1cHg7XG4gICAgZm9udC1zaXplOiAxLjRyZW07XG4gIH1cbiAgLm9waW5pb25fX3RleHQge1xuICAgIG1hcmdpbjogMC41ZW0gYXV0bztcbiAgICBmb250LXNpemU6IDEuMnJlbTtcbiAgfVxuICAub3Bpbmlvbl9fc3RhcnMge1xuICAgIHRvcDogLTI2cHg7XG4gICAgbGVmdDogMzkwcHg7XG4gICAgZm9udC1zaXplOiAxLjRyZW07XG4gIH1cbn1cbkBtZWRpYSAobWluLXdpZHRoOiAxNDAwcHgpIHtcbiAgLmhlYWRlcl9fdGl0dGxlIHtcbiAgICBmb250LXNpemU6IDNyZW07XG4gIH1cbiAgLmhlcm9fX3RleHQge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICBwYWRkaW5nOiAwLjVlbTtcbiAgfVxuICAuaGVyb19fbGFtcDIge1xuICAgIGxlZnQ6IDYzMHB4O1xuICAgIHRvcDogMjEwcHg7XG4gIH1cbiAgLmhlcm9fX2xhbXAzIHtcbiAgICBsZWZ0OiA2NjBweDtcbiAgICB0b3A6IDIxMHB4O1xuICB9XG4gIC5oZXJvX19sYW1wNCB7XG4gICAgbGVmdDogODUzcHg7XG4gICAgdG9wOiAyMTNweDtcbiAgfVxuICAuYWJvdXRfX3RpdGxlIHtcbiAgICBmb250LXNpemU6IDNyZW07XG4gIH1cbiAgLmFib3V0X19pbWcge1xuICAgIHdpZHRoOiA3NTBweDtcbiAgfVxuICAuYWJvdXRfX2xpc3QtLWl0ZW0ge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuICAuc2VydmljZV9fdGl0dGxlIHtcbiAgICBmb250LWZhbWlseTogXCJBdWRpb3dpZGVcIiwgc2Fucy1zZXJpZjtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xuICAgIGNvbG9yOiBncmV5O1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB3aGl0ZXNtb2tlO1xuICAgIHBhZGRpbmc6IDAuNWVtIDA7XG4gIH1cbiAgLnNlcnZpY2VfX3RleHQge1xuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xuICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xuICB9XG4gIC5zZXJ2aWNlX19ib3gge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdpZHRoOiAyNTBweDtcbiAgICBoZWlnaHQ6IDM1MHB4O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgIHBhZGRpbmc6IDFlbSAwLjVlbTtcbiAgICB0cmFuc2l0aW9uOiAwLjNzO1xuICB9XG4gIC5vcGluaW9uX19uYW1lIHtcbiAgICB0b3A6IC0yOHB4O1xuICAgIGxlZnQ6IDIwcHg7XG4gICAgZm9udC1zaXplOiAxLjZyZW07XG4gIH1cbiAgLm9waW5pb25fX3RleHQge1xuICAgIG1hcmdpbjogMWVtIGF1dG87XG4gICAgZm9udC1zaXplOiAxLjRyZW07XG4gIH1cbiAgLm9waW5pb25fX3N0YXJzIHtcbiAgICB0b3A6IC0yOHB4O1xuICAgIGxlZnQ6IDYwMHB4O1xuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xuICB9XG59XG5AbWVkaWEgKG1pbi13aWR0aDogMjAwMHB4KSB7XG4gIC5oZWFkZXJfX3RpdHRsZSB7XG4gICAgZm9udC1zaXplOiAzcmVtO1xuICB9XG4gIC5oZXJvX190ZXh0IHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gICAgcGFkZGluZzogMC41ZW07XG4gIH1cbiAgLmhlcm9fX2xhbXAyIHtcbiAgICBsZWZ0OiA2MzBweDtcbiAgICB0b3A6IDIxMHB4O1xuICB9XG4gIC5oZXJvX19sYW1wMyB7XG4gICAgbGVmdDogNjYwcHg7XG4gICAgdG9wOiAyMTBweDtcbiAgfVxuICAuaGVyb19fbGFtcDQge1xuICAgIGxlZnQ6IDg1M3B4O1xuICAgIHRvcDogMjEzcHg7XG4gIH1cbiAgLmFib3V0X190aXRsZSB7XG4gICAgZm9udC1zaXplOiAzcmVtO1xuICB9XG4gIC5hYm91dF9faW1nIHtcbiAgICB3aWR0aDogNzUwcHg7XG4gIH1cbiAgLmFib3V0X19saXN0LS1pdGVtIHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gIH1cbiAgLnNlcnZpY2VfX3RpdHRsZSB7XG4gICAgZm9udC1mYW1pbHk6IFwiQXVkaW93aWRlXCIsIHNhbnMtc2VyaWY7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBmb250LXNpemU6IDEuNnJlbTtcbiAgICBjb2xvcjogZ3JleTtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgd2hpdGVzbW9rZTtcbiAgICBwYWRkaW5nOiAwLjVlbSAwO1xuICB9XG4gIC5zZXJ2aWNlX190ZXh0IHtcbiAgICBmb250LXNpemU6IDEuMXJlbTtcbiAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcbiAgfVxuICAuc2VydmljZV9fYm94IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB3aWR0aDogMjUwcHg7XG4gICAgaGVpZ2h0OiAzNTBweDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBwYWRkaW5nOiAxZW0gMC41ZW07XG4gICAgdHJhbnNpdGlvbjogMC4zcztcbiAgfVxuICAub3Bpbmlvbl9fbmFtZSB7XG4gICAgdG9wOiAtMjhweDtcbiAgICBsZWZ0OiAyMHB4O1xuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xuICB9XG4gIC5vcGluaW9uX190ZXh0IHtcbiAgICBtYXJnaW46IDFlbSBhdXRvO1xuICAgIGZvbnQtc2l6ZTogMS40cmVtO1xuICB9XG4gIC5vcGluaW9uX19zdGFycyB7XG4gICAgdG9wOiAtMjhweDtcbiAgICBsZWZ0OiAxMTAwcHg7XG4gICAgZm9udC1zaXplOiAxLjZyZW07XG4gIH1cbn0iLCIuc2VjdGlvbiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOTE0KTtcclxuICAgIGNvbG9yOiB3aGl0ZXNtb2tlO1xyXG59IiwiLy8gPDQ4MHB4XHJcblxyXG5cclxuLmhlYWRlciB7XHJcbiAgICBjb2xvcjogd2hpdGVzbW9rZTtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCg0NWRlZywgcmdiYSgwLCAwLCAwLCAxKSwgcmdiYSgwLCAwLCAwLCAwLjkpKTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IC4zZW0gMDtcclxuXHJcbiAgICAmX190aXR0bGUge1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiBcIkF1ZGlvd2lkZVwiLCBzYW5zLXNlcmlmO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMC45cmVtO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAmX19zcGFuIHtcclxuICAgICAgICBjb2xvcjogcmVkO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLmhlcm8ge1xyXG5cclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCg0NWRlZywgcmdiYSgwLCAwLCAwLCAwLjQpLCByZ2JhKDAsIDAsIDAsIDAuNSkpLFxyXG4gICAgICAgIHVybChcIi9kaXN0L2ltZy9iYWNrZ3JvdW5kX2hlYWRlcjIucG5nXCIpO1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgICBiYWNrZ3JvdW5kLWF0dGFjaG1lbnQ6IHNjcm9sbDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiA1MHZoO1xyXG4gICAgei1pbmRleDogMjtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcblxyXG4gICAgJl9faW5mbyB7XHJcbiAgICAgICAgcGFkZGluZzogLjJlbTtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fdGV4dCB7XHJcbiAgICAgICAgY29sb3I6IHdoaXRlc21va2U7XHJcbiAgICAgICAgZm9udC1zaXplOiAuNnJlbTtcclxuXHJcbiAgICAgICAgLmZhLXBob25lIHtcclxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwLjRlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAmX19pbWcge1xyXG4gICAgICAgIHdpZHRoOiAxNTBweDtcclxuICAgICAgICBoZWlnaHQ6IDEyNXB4O1xyXG4gICAgICAgIG9wYWNpdHk6IDAuNTtcclxuICAgIH1cclxuXHJcbiAgICAmX19sYW1wLFxyXG4gICAgJl9fbGFtcDIsXHJcbiAgICAmX19sYW1wMyxcclxuICAgICZfX2xhbXA0IHtcclxuICAgICAgICBsZWZ0OiA4ODVweDtcclxuICAgICAgICB0b3A6IDIxMnB4O1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB3aWR0aDogMjNweDtcclxuICAgICAgICBoZWlnaHQ6IDIzcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggNTBweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7XHJcblxyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcblxyXG4gICAgICAgIGZpbHRlcjogYmx1cigyMHB4KTtcclxuXHJcbiAgICAgICAgYW5pbWF0aW9uOiBsaWdodFVwIDFzIGVhc2UtaW4tb3V0IDBzIDMgYWx0ZXJuYXRlO1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgJl9fbGFtcDIge1xyXG4gICAgICAgIGxlZnQ6IDEzMHB4O1xyXG4gICAgICAgIHRvcDogMTAwcHg7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fbGFtcDMge1xyXG4gICAgICAgIGxlZnQ6IDIzNXB4O1xyXG4gICAgICAgIHRvcDogMTAwcHg7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fbGFtcDQge1xyXG4gICAgICAgIGxlZnQ6IDI1NXB4O1xyXG4gICAgICAgIHRvcDogMTAwcHg7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5Aa2V5ZnJhbWVzIGxpZ2h0VXAge1xyXG4gICAgMCUge1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgZmlsdGVyOiBibHVyKDIwcHgpO1xyXG4gICAgICAgIC8qIE1vY25vIHJvem15dGUgbmEgcG9jesSFdGt1ICovXHJcbiAgICAgICAgYm94LXNoYWRvdzogMHB4IDBweCA1MHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTtcclxuICAgICAgICAvKiBTxYJhYm8gd2lkb2N6bnkgY2llxYQgKi9cclxuICAgIH1cclxuXHJcbiAgICA1MCUge1xyXG4gICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgZmlsdGVyOiBibHVyKDVweCk7XHJcbiAgICAgICAgLyogTW5pZWpzemUgcm96bXljaWUgKi9cclxuICAgICAgICBib3gtc2hhZG93OiAwcHggMHB4IDEwMHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMSk7XHJcbiAgICAgICAgLyogxZp3aWF0xYJvIHN0YWplIHNpxJkgbW9jbmllanN6ZSAqL1xyXG4gICAgfVxyXG5cclxuICAgIDEwMCUge1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgZmlsdGVyOiBibHVyKDIwcHgpO1xyXG4gICAgICAgIC8qIFJvem15Y2llIHdyYWNhICovXHJcbiAgICAgICAgYm94LXNoYWRvdzogMHB4IDBweCA1MHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTtcclxuICAgICAgICAvKiBabW5pZWpzem9uZSDFm3dpYXTFgm8gKi9cclxuICAgIH1cclxufVxyXG5cclxuLmluZm8ge1xyXG5cclxuICAgICZfX2ljb24ge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgICAgICBwYWRkaW5nOiAuNWVtIDA7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fY2FyZHMge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fY2FyZCB7XHJcbiAgICAgICAgY29sb3I6IHdoaXRlc21va2U7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIHdpZHRoOiAyMDBweDtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgICAgICAgcGFkZGluZzogLjVlbSAxZW07XHJcbiAgICB9XHJcblxyXG4gICAgJl9faGVhZGVyIHtcclxuICAgICAgICBmb250LXNpemU6IC43cmVtO1xyXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIH1cclxufVxyXG5cclxuLmluZm9fX2NhcmQ6bnRoLWNoaWxkKDEpIHtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgICBhbmltYXRpb246IGZhZGVJbiAycyBlYXNlLW91dCBmb3J3YXJkcztcclxuICAgIC8qIEthcnRhIDEgcG9qYXdpYSBzacSZIHBvIDIgc2VrdW5kYWNoICovXHJcbn1cclxuXHJcbi5pbmZvX19jYXJkOm50aC1jaGlsZCgyKSB7XHJcbiAgICBvcGFjaXR5OiAwO1xyXG4gICAgYW5pbWF0aW9uOiBmYWRlSW4gMnMgZWFzZS1vdXQgZm9yd2FyZHM7XHJcbiAgICBhbmltYXRpb24tZGVsYXk6IDFzO1xyXG4gICAgLyogS2FydGEgMiBwb2phd2lhIHNpxJkgcG8gNCBzZWt1bmRhY2ggKi9cclxufVxyXG5cclxuLmluZm9fX2NhcmQ6bnRoLWNoaWxkKDMpIHtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgICBhbmltYXRpb246IGZhZGVJbiAycyBlYXNlLW91dCBmb3J3YXJkcztcclxuICAgIGFuaW1hdGlvbi1kZWxheTogMnM7XHJcbiAgICAvKiBLYXJ0YSAzIHBvamF3aWEgc2nEmSBwbyA2IHNla3VuZGFjaCAqL1xyXG59XHJcblxyXG5cclxuQGtleWZyYW1lcyBmYWRlSW4ge1xyXG4gICAgMCUge1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcblxyXG4gICAgICAgIC8qIEVmZWt0IHByemVzdW5pxJljaWEgKi9cclxuICAgIH1cclxuXHJcbiAgICAxMDAlIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbi5yZXZpZXcge1xyXG4gICAgLy8gaGVpZ2h0OiAxMHZoO1xyXG4gICAgcGFkZGluZzogMC41ZW0gMWVtO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuXHJcbiAgICAmX190ZXh0IHtcclxuICAgICAgICBmb250LXNpemU6IC44cmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAyZW07XHJcblxyXG4gICAgfVxyXG5cclxuICAgICZfX3RpdHRsZSB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiBcIkF1ZGlvd2lkZVwiLCBzYW5zLXNlcmlmO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogLjZyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxZW07XHJcbiAgICB9XHJcblxyXG4gICAgJl9fYm94IHtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fYm94LFxyXG4gICAgJl9faW5mbyB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICB9XHJcblxyXG4gICAgYSB7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxZW07XHJcblxyXG4gICAgICAgIGltZyB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgdG9wOiAtMTJweDtcclxuICAgICAgICAgICAgbGVmdDogLTIwcHg7XHJcbiAgICAgICAgICAgIHdpZHRoOiA0NXB4O1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICZfX2luZm8ge1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMmVtO1xyXG5cclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG4uYWJvdXQge1xyXG4gICAgJl9fdGl0bGUge1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiBcIkF1ZGlvd2lkZVwiLCBzYW5zLXNlcmlmO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgICAgIHBhZGRpbmc6IC4zZW0gLjVlbTtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgd2hpdGU7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fYm94IHtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxuXHJcbiAgICAmX19pbWcge1xyXG4gICAgICAgIHdpZHRoOiAyNTBweDtcclxuICAgICAgICBtYXJnaW4tdG9wOiAuNWVtO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICAgICAgICBib3gtc2hhZG93OiA1cHggNXB4IDEwcHggcmdiYSgkY29sb3I6ICNmZmZmZmYyZSwgJGFscGhhOiAwLjIpO1xyXG4gICAgfVxyXG5cclxuICAgICZfX2xpc3Qge1xyXG4gICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgICAgICAgcGFkZGluZzogLjVlbSAwO1xyXG5cclxuICAgICAgICAmLS1pdGVtIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAuOHJlbTtcclxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLjVlbTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi5sb2dvIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG5cclxuXHJcbiAgICAmX19ib3gge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgfVxyXG5cclxuICAgICZfX2ltZyB7XHJcbiAgICAgICAgd2lkdGg6IDUwcHg7XHJcbiAgICAgICAgaGVpZ2h0OiA1MHB4O1xyXG5cclxuICAgICAgICAmLS1ibXcge1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDU1cHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLS10b3lvdGEge1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDQ1cHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLS1uaXNzYW4ge1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDM1cHg7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4uc2VydmljZXMge1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCByZ2JhKDAsIDAsIDAsIDAuNCksIHJnYmEoMCwgMCwgMCwgMC41KSksXHJcbiAgICAgICAgdXJsKFwiL2Rpc3QvaW1nL2JhY2tncm91bmRfaGVhZGVyMi5wbmdcIik7XHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XHJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICAgIGJhY2tncm91bmQtYXR0YWNobWVudDogZml4ZWQ7XHJcblxyXG4gICAgJl9fYm94ZXMge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgIHBhZGRpbmc6IC41ZW0gMWVtO1xyXG4gICAgfVxyXG59XHJcblxyXG4uc2VydmljZSB7XHJcbiAgICAmX19ib3gge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICAgICAgcGFkZGluZzogMWVtIC41ZW07XHJcblxyXG4gICAgICAgIHRyYW5zaXRpb246IG91dGxpbmUsIGJveC1zaGFkb3cgMXM7XHJcbiAgICAgICAgbWFyZ2luOiAxZW0gMCAuNWVtIDA7XHJcblxyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICBib3gtc2hhZG93OiAxMHB4IDEwcHggMzBweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmX190aXR0bGUge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgICAgICBmb250LWZhbWlseTogXCJBdWRpb3dpZGVcIiwgc2Fucy1zZXJpZjtcclxuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICAgIGNvbG9yOiBncmV5O1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB3aGl0ZXNtb2tlO1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDJlbTtcclxuICAgICAgICBwYWRkaW5nOiAuNWVtIDA7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fdGV4dCB7XHJcbiAgICAgICAgZm9udC1zaXplOiAuOHJlbTtcclxuICAgICAgICBwYWRkaW5nOiAuNWVtO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcbi5vcGluaW9ucyB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDApO1xyXG4gICAgY29sb3I6IHdoaXRlc21va2U7XHJcbiAgICBwYWRkaW5nOiAxZW0gMDtcclxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB3aGl0ZXNtb2tlO1xyXG5cclxuICAgICZfX2JveCB7XHJcblxyXG4gICAgICAgIHBhZGRpbmc6IC41ZW0gMWVtO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuLm9waW5pb24ge1xyXG5cclxuICAgICZfX2JveCB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogLjVlbTtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHdoZWF0O1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB3aGVhdDtcclxuICAgICAgICAvLyBib3JkZXItcmFkaXVzOiA4cHg7XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICAmX19uYW1lIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDApO1xyXG4gICAgICAgIHotaW5kZXg6IDI7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogLTE1cHg7XHJcbiAgICAgICAgbGVmdDogMTBweDtcclxuICAgICAgICBmb250LXNpemU6IC44cmVtO1xyXG4gICAgICAgIHBhZGRpbmc6IC41ZW0gMDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblxyXG4gICAgfVxyXG5cclxuICAgICZfX3RleHQge1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICBmb250LXNpemU6IC43cmVtO1xyXG4gICAgICAgIHBhZGRpbmc6IDFlbTtcclxuICAgIH1cclxuXHJcbiAgICAmX19zdGFycyB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCk7XHJcbiAgICAgICAgdG9wOiAtMTVweDtcclxuICAgICAgICBsZWZ0OiAxODBweDtcclxuICAgICAgICBjb2xvcjogZ29sZGVucm9kO1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICBmb250LXNpemU6IC44cmVtO1xyXG4gICAgICAgIHBhZGRpbmc6IC41ZW0gMDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vLS0zOTAtLS8vXHJcblxyXG5cclxuQG1lZGlhIChtaW4td2lkdGg6IDM5MHB4KSB7XHJcblxyXG4gICAgLmhlYWRlciB7XHJcbiAgICAgICAgJl9fdGl0dGxlIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLmhlcm8ge1xyXG5cclxuICAgICAgICAmX19pbmZvIHtcclxuICAgICAgICAgICAgcGFkZGluZzogLjRlbTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX190ZXh0IHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAuOXJlbTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19pbWcge1xyXG4gICAgICAgICAgICB3aWR0aDogMjUwcHg7XHJcbiAgICAgICAgICAgIGhlaWdodDogMjAwcHg7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLmZhLXBob25lIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAwLjdyZW07XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLmluZm8ge1xyXG5cclxuXHJcbiAgICAgICAgJl9faWNvbiB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgICZfX2hlYWRlciB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44cmVtO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLnJldmlldyB7XHJcbiAgICAgICAgJl9fdGl0dGxlIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAwLjlyZW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX190ZXh0IHtcclxuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDJlbTtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMWVtO1xyXG5cclxuICAgICAgICAgICAgaW1nIHtcclxuICAgICAgICAgICAgICAgIHRvcDogLTE1cHg7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAtMThweDtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA1NXB4O1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAuYWJvdXQge1xyXG4gICAgICAgICZfX3RpdGxlIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19pbWcge1xyXG4gICAgICAgICAgICB3aWR0aDogMzAwcHg7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgICZfX2xpc3Qge1xyXG5cclxuXHJcbiAgICAgICAgICAgICYtLWl0ZW0ge1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogLjNlbSAwO1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAuOHJlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgLjVlbTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLm9waW5pb24ge1xyXG5cclxuICAgICAgICAmX19uYW1lIHtcclxuICAgICAgICAgICAgdG9wOiAtMTdweDtcclxuICAgICAgICAgICAgbGVmdDogMTBweDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAuOXJlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IC44cmVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fc3RhcnMge1xyXG4gICAgICAgICAgICB0b3A6IC0xN3B4O1xyXG4gICAgICAgICAgICBsZWZ0OiAyMjBweDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAuOXJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi8vLS00MzAtLS8vXHJcblxyXG5AbWVkaWEgKG1pbi13aWR0aDogNDMwcHgpIHtcclxuXHJcbiAgICAuYWJvdXQge1xyXG5cclxuICAgICAgICAmX19pbWcge1xyXG4gICAgICAgICAgICB3aWR0aDogMzUwcHg7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgICZfX2xpc3Qge1xyXG5cclxuICAgICAgICAgICAgJi0taXRlbSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC5zZXJ2aWNlIHtcclxuXHJcblxyXG4gICAgICAgICZfX3RpdHRsZSB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAgICAgLm9waW5pb24ge1xyXG5cclxuICAgIFxyXG4gICAgICAgICAgICAmX19zdGFycyB7XHJcbiAgICAgICAgICAgICAgICB0b3A6IC0xN3B4O1xyXG4gICAgICAgICAgICAgICAgbGVmdDogMjYwcHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG59IiwiIC8vIEBtZWRpYSAobWluLXdpZHRoOiA0ODBweCkge1xyXG4gLy8gICAgIC8qIFN0eWxpemFjamUgZGxhIHRlbGVmb27Ds3cgbyB3acSZa3N6eWNoIGVrcmFuYWNoICovXHJcbiAvLyB9XHJcbiAvLyBAbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcclxuIC8vICAgICAvKiBTdHlsaXphY2plIGRsYSB3acSZa3N6eWNoIHRlbGVmb27Ds3cgKi9cclxuIC8vIH1cclxuXHJcblxyXG5cclxuXHJcbiBAbWVkaWEgKG1pbi13aWR0aDogNDgwcHgpIHtcclxuICAgICAub3BpbmlvbiB7XHJcblxyXG5cclxuICAgICAgICAgJl9fc3RhcnMge1xyXG4gICAgICAgICAgICAgdG9wOiAtMThweDtcclxuICAgICAgICAgICAgIGxlZnQ6IDMwMHB4O1xyXG5cclxuICAgICAgICAgfVxyXG4gICAgIH1cclxuXHJcbiB9XHJcblxyXG5cclxuXHJcbiBAbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcclxuXHJcbiAgICAgLmhlYWRlciB7XHJcbiAgICAgICAgICZfX3RpdHRsZSB7XHJcbiAgICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgICAgICAgfVxyXG5cclxuICAgICB9XHJcblxyXG4gICAgIC5yZXZpZXcge1xyXG4gICAgICAgICAmX190aXR0bGUge1xyXG4gICAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIGEge1xyXG5cclxuXHJcbiAgICAgICAgICAgICBpbWcge1xyXG4gICAgICAgICAgICAgICAgIHRvcDogLTEzcHg7XHJcbiAgICAgICAgICAgICAgICAgbGVmdDogLTE1cHg7XHJcblxyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgfVxyXG5cclxuICAgICAuaGVybyB7XHJcbiAgICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XHJcblxyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICAuZmEtcGhvbmUge1xyXG4gICAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICAgICAgIH1cclxuICAgICB9XHJcblxyXG4gICAgIC5pbmZvIHtcclxuXHJcblxyXG4gICAgICAgICAmX19pY29uIHtcclxuICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS42cmVtO1xyXG4gICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAgJl9faGVhZGVyIHtcclxuICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG5cclxuICAgICAgICAgfVxyXG4gICAgIH1cclxuXHJcblxyXG4gICAgIC5hYm91dCB7XHJcbiAgICAgICAgICZfX3RpdGxlIHtcclxuXHJcbiAgICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuXHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgICAgICB3aWR0aDogNDAwcHg7XHJcbiAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAgJl9fbGlzdCB7XHJcblxyXG4gICAgICAgICAgICAgJi0taXRlbSB7XHJcblxyXG4gICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4zcmVtO1xyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcblxyXG5cclxuICAgICB9XHJcblxyXG4gICAgIC5sb2dvIHtcclxuICAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG5cclxuICAgICAgICAgJl9faW1nIHtcclxuICAgICAgICAgICAgIHdpZHRoOiA3MHB4O1xyXG4gICAgICAgICAgICAgaGVpZ2h0OiA3MHB4O1xyXG5cclxuICAgICAgICAgICAgICYtLXRveW90YSB7XHJcbiAgICAgICAgICAgICAgICAgaGVpZ2h0OiA3MHB4O1xyXG4gICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICYtLW5pc3NhbiB7XHJcbiAgICAgICAgICAgICAgICAgd2lkdGg6IDc1cHg7XHJcbiAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1NXB4O1xyXG4gICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgIH1cclxuICAgICB9XHJcblxyXG4gICAgIC5vcGluaW9uIHtcclxuXHJcbiAgICAgICAgICZfX25hbWUge1xyXG4gICAgICAgICAgICAgdG9wOiAtMThweDtcclxuICAgICAgICAgICAgIGxlZnQ6IDEwcHg7XHJcbiAgICAgICAgICAgICBmb250LXNpemU6IDFyZW07XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICAgZm9udC1zaXplOiAuOXJlbTtcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgJl9fc3RhcnMge1xyXG4gICAgICAgICAgICAgdG9wOiAtMTlweDtcclxuICAgICAgICAgICAgIGxlZnQ6IDQwMHB4O1xyXG4gICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgICAgICB9XHJcbiAgICAgfVxyXG4gfVxyXG5cclxuXHJcbiAvLy0tNjcwLS0vL1xyXG5cclxuIEBtZWRpYSAobWluLXdpZHRoOiA2NzBweCkge1xyXG4gICAgIC5hYm91dCB7XHJcbiAgICAgICAgICZfX3RpdGxlIHtcclxuXHJcbiAgICAgICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICAgICAgICAgICBwYWRkaW5nOiAuMmVtIC41ZW07XHJcblxyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICAmX19ib3gge1xyXG4gICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgICAgICAgICAgIHBhZGRpbmc6IC41ZW0gMWVtO1xyXG5cclxuXHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgICAgICB3aWR0aDogMzAwcHg7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICZfX2xpc3Qge1xyXG4gICAgICAgICAgICAgcGFkZGluZzogMCAuNWVtO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAmLS1pdGVtIHtcclxuICAgICAgICAgICAgICAgICBwYWRkaW5nOiAuMWVtIDA7XHJcbiAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICBpIHtcclxuICAgICAgICAgICAgIHBhZGRpbmc6IDAgLjVlbTtcclxuICAgICAgICAgfVxyXG4gICAgIH1cclxuXHJcblxyXG4gICAgIC5sb2dvIHtcclxuICAgICAgICAgJl9faW1nIHtcclxuXHJcbiAgICAgICAgICAgICAmLS1uaXNzYW4ge1xyXG4gICAgICAgICAgICAgICAgIHdpZHRoOiA4MHB4O1xyXG4gICAgICAgICAgICAgICAgIGhlaWdodDogNTVweDtcclxuICAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgIH1cclxuXHJcblxyXG4gICAgIC5zZXJ2aWNlIHtcclxuXHJcblxyXG4gICAgICAgICAmX190aXR0bGUge1xyXG4gICAgICAgICAgICAgZm9udC1zaXplOiAxLjRyZW07XHJcblxyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICAmX190ZXh0IHtcclxuICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG5cclxuICAgICAgICAgfVxyXG4gICAgIH1cclxuXHJcblxyXG4gICAgIC5vcGluaW9uIHtcclxuXHJcbiAgICAgICAgICZfX25hbWUge1xyXG4gICAgICAgICAgICAgdG9wOiAtMTlweDtcclxuICAgICAgICAgICAgIGxlZnQ6IDE1cHg7XHJcbiAgICAgICAgICAgICBmb250LXNpemU6IDEuMXJlbTtcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgJl9fdGV4dCB7XHJcbiAgICAgICAgICAgICBmb250LXNpemU6IDFyZW07XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICZfX3N0YXJzIHtcclxuICAgICAgICAgICAgIHRvcDogLTIwcHg7XHJcbiAgICAgICAgICAgICBsZWZ0OiA0ODBweDtcclxuICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xyXG4gICAgICAgICB9XHJcbiAgICAgfVxyXG5cclxuXHJcbiB9IiwiLy8gQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XHJcbi8vICAgICAvKiBTdHlsaXphY2plIGRsYSB0YWJsZXTDs3cgKi9cclxuLy8gfVxyXG4vLyBAbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcclxuLy8gICAgIC8qIFN0eWxpemFjamUgZGxhIHdpxJlrc3p5Y2ggdGFibGV0w7N3IGkgbWHFgnljaCBsYXB0b3DDs3cgKi9cclxuLy8gfVxyXG5cclxuXHJcblxyXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcclxuXHJcbiAgICAuaGVhZGVyIHtcclxuICAgICAgICAmX190aXR0bGUge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLmhlcm8ge1xyXG4gICAgICAgIGhlaWdodDogNzB2aDtcclxuXHJcbiAgICAgICAgJl9faW1nIHtcclxuICAgICAgICAgICAgd2lkdGg6IDM1MHB4O1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDMwMHB4O1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuZmEtcGhvbmUge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLnJldmlldyB7XHJcbiAgICAgICAgJl9fdGl0dGxlIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX190ZXh0IHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhIHtcclxuXHJcblxyXG4gICAgICAgICAgICBpbWcge1xyXG4gICAgICAgICAgICAgICAgdG9wOiAtMTFweDtcclxuICAgICAgICAgICAgICAgIGxlZnQ6IC0xM3B4O1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDY1cHg7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU1cHg7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5pbmZvIHtcclxuXHJcblxyXG4gICAgICAgICZfX2ljb24ge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAmX19oZWFkZXIge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLmFib3V0IHtcclxuICAgICAgICAmX190aXRsZSB7XHJcblxyXG4gICAgICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IC4yZW0gLjVlbTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19ib3gge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAuNWVtIDFlbTtcclxuXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9faW1nIHtcclxuICAgICAgICAgICAgd2lkdGg6IDM1MHB4O1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2xpc3Qge1xyXG5cclxuXHJcbiAgICAgICAgICAgICYtLWl0ZW0ge1xyXG5cclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4zcmVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5zZXJ2aWNlcyB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCByZ2JhKDAsIDAsIDAsIDAuNCksIHJnYmEoMCwgMCwgMCwgMC41KSksXHJcbiAgICAgICAgICAgIHVybChcIi9kaXN0L2ltZy9iYWNrZ3JvdW5kX2hlYWRlcjIucG5nXCIpO1xyXG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcclxuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgICAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDtcclxuXHJcbiAgICAgICAgJl9fYm94ZXMge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcclxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuc2VydmljZSB7XHJcbiAgICAgICAgICAgICZfX3RpdHRsZSB7XHJcbiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogXCJBdWRpb3dpZGVcIiwgc2Fucy1zZXJpZjtcclxuICAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuM3JlbTtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiBncmV5O1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHdoaXRlc21va2U7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAuNWVtIDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICZfX2JveCB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMjAwcHg7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwMHB4O1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiBub25lO1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IC4zcztcclxuXHJcbiAgICAgICAgICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiA1cHggNXB4IDMwcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmX19ib3hlcyB7XHJcblxyXG4gICAgICAgICAgICAgICAgJi0tdG9wLFxyXG4gICAgICAgICAgICAgICAgJi0tYm90dG9tIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xyXG4gICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDFlbSAwO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5vcGluaW9uIHtcclxuXHJcbiAgICAgICAgJl9fbmFtZSB7XHJcbiAgICAgICAgICAgIHRvcDogLTIwcHg7XHJcbiAgICAgICAgICAgIGxlZnQ6IDE1cHg7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fdGV4dCB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fc3RhcnMge1xyXG4gICAgICAgICAgICB0b3A6IC0yMnB4O1xyXG4gICAgICAgICAgICBsZWZ0OiA1MjBweDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8tLTkwMC0tLy9cclxuXHJcbkBtZWRpYSAobWluLXdpZHRoOiA5MDBweCkge1xyXG5cclxuICAgIC5hYm91dCB7XHJcblxyXG5cclxuICAgICAgICAmX19ib3gge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAuNWVtIDFlbTtcclxuXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9faW1nIHtcclxuICAgICAgICAgICAgd2lkdGg6IDQ1MHB4O1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2xpc3Qge1xyXG5cclxuXHJcbiAgICAgICAgICAgICYtLWl0ZW0ge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLjVlbTtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS40cmVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5vcGluaW9uIHtcclxuXHJcblxyXG5cclxuICAgICAgICAmX19zdGFycyB7XHJcbiAgICAgICAgICAgIHRvcDogLTIycHg7XHJcbiAgICAgICAgICAgIGxlZnQ6IDY4MHB4O1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8tLTk5Mi0tLy9cclxuXHJcblxyXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcclxuXHJcblxyXG4gICAgLmhlcm8ge1xyXG4gICAgICAgIGhlaWdodDogYXV0bztcclxuXHJcbiAgICAgICAgJl9faW1nIHtcclxuICAgICAgICAgICAgd2lkdGg6IDQ1MHB4O1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDQwMHB4O1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC5yZXZpZXcge1xyXG4gICAgICAgICZfX3RpdHRsZSB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGEge1xyXG5cclxuXHJcbiAgICAgICAgICAgIGltZyB7XHJcbiAgICAgICAgICAgICAgICB0b3A6IC0xNnB4O1xyXG4gICAgICAgICAgICAgICAgbGVmdDogLTIwcHg7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNzVweDtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNjVweDtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLmluZm8ge1xyXG5cclxuXHJcbiAgICAgICAgJl9faWNvbiB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS42cmVtO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICZfX2hlYWRlciB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS42cmVtO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAuYWJvdXQge1xyXG5cclxuICAgICAgICAmX190aXRsZSB7XHJcblxyXG4gICAgICAgICAgICBmb250LXNpemU6IDIuMnJlbTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgJl9fYm94IHtcclxuICAgICAgICAgICAgcGFkZGluZzogLjVlbSAxZW07XHJcblxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgICAgIHdpZHRoOiA1MDBweDtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19saXN0IHtcclxuXHJcblxyXG4gICAgICAgICAgICAmLS1pdGVtIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDFlbTtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS42cmVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5zZXJ2aWNlcyB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCByZ2JhKDAsIDAsIDAsIDAuNCksIHJnYmEoMCwgMCwgMCwgMC41KSksXHJcbiAgICAgICAgICAgIHVybChcIi9kaXN0L2ltZy9iYWNrZ3JvdW5kX2hlYWRlcjIucG5nXCIpO1xyXG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcclxuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgICAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDtcclxuXHJcbiAgICAgICAgJl9fYm94ZXMge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcclxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAxZW07XHJcblxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5zZXJ2aWNlIHtcclxuICAgICAgICAgICAgJl9fdGl0dGxlIHtcclxuICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBcIkF1ZGlvd2lkZVwiLCBzYW5zLXNlcmlmO1xyXG4gICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS42cmVtO1xyXG4gICAgICAgICAgICAgICAgY29sb3I6IGdyZXk7XHJcbiAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgd2hpdGVzbW9rZTtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IC41ZW0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJl9fdGV4dCB7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuMXJlbTtcclxuICAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmX19ib3gge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpO1xyXG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDI1MHB4O1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzNTBweDtcclxuICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcclxuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxZW0gLjVlbTtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IC4zcztcclxuXHJcbiAgICAgICAgICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiA1cHggNXB4IDMwcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmX19ib3hlcyB7XHJcblxyXG4gICAgICAgICAgICAgICAgJi0tdG9wLFxyXG4gICAgICAgICAgICAgICAgJi0tYm90dG9tIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xyXG4gICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDJlbSAwO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuIFxyXG5cclxuICAgIC5vcGluaW9uIHtcclxuXHJcbiAgICAgICAgJl9fYm94e1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDFlbTtcclxuICAgICAgICAgICAgaGVpZ2h0OiAxNjBweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX25hbWUge1xyXG4gICAgICAgICAgICB0b3A6IC0yMXB4O1xyXG4gICAgICAgICAgICBsZWZ0OiAxNXB4O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuMnJlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICBtYXJnaW46IC4zZW0gYXV0bztcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjFyZW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19zdGFycyB7XHJcbiAgICAgICAgICAgIHRvcDogLTI0cHg7XHJcbiAgICAgICAgICAgIGxlZnQ6IDMxMHB4O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuMnJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vLS0xMDI0LS0vL1xyXG5cclxuQG1lZGlhIChtaW4td2lkdGg6IDEwMjRweCkge1xyXG5cclxuICAgIC5hYm91dCB7XHJcblxyXG4gICAgICAgICZfX2JveCB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IC41ZW0gMWVtO1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX190aXRsZSB7XHJcblxyXG4gICAgICAgICAgICBmb250LXNpemU6IDIuNXJlbTtcclxuXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fYm94IHtcclxuICAgICAgICAgICAgcGFkZGluZzogMWVtIDFlbTtcclxuXHJcblxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgICAgIHdpZHRoOiA1NTBweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2xpc3Qge1xyXG5cclxuXHJcbiAgICAgICAgICAgICYtLWl0ZW0ge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC5vcGluaW9uIHtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAmX19zdGFycyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogLTIzcHg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbn0iLCIvLyBAbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XHJcbi8vICAgICAvKiBTdHlsaXphY2plIGRsYSB3acSZa3N6eWNoIGxhcHRvcMOzdyBpIG1vbml0b3LDs3cgZGVza3RvcG93eWNoICovXHJcbi8vIH1cclxuXHJcblxyXG5cclxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xyXG5cclxuICAgIC5oZWFkZXIge1xyXG4gICAgICAgICZfX3RpdHRsZSB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLmhlcm8ge1xyXG4gICAgICAgIGJhY2tncm91bmQtYXR0YWNobWVudDogZml4ZWQ7XHJcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAucmV2aWV3IHtcclxuXHJcblxyXG4gICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogM2VtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fdGl0dGxlIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAycmVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYSB7XHJcblxyXG5cclxuICAgICAgICAgICAgaW1nIHtcclxuICAgICAgICAgICAgICAgIHRvcDogLTI1cHg7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAtMjVweDtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMjBweDtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogOTBweDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAmX190ZXh0IHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAycmVtO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAuaW5mbyB7XHJcblxyXG4gICAgICAgICZfX2ljb24ge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDNyZW07XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAmX19oZWFkZXIge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDJyZW07XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC5hYm91dCB7XHJcblxyXG4gICAgICAgICZfX2JveCB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IC41ZW0gMWVtO1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX190aXRsZSB7XHJcblxyXG4gICAgICAgICAgICBmb250LXNpemU6IDIuNXJlbTtcclxuXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fYm94IHtcclxuICAgICAgICAgICAgcGFkZGluZzogMWVtIDFlbTtcclxuXHJcblxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgICAgIHdpZHRoOiA2NTBweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2xpc3Qge1xyXG5cclxuXHJcbiAgICAgICAgICAgICYtLWl0ZW0ge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAubG9nbyB7XHJcblxyXG5cclxuICAgICAgICAmX19pbWcge1xyXG4gICAgICAgICAgICB3aWR0aDogMTAwcHg7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwcHg7XHJcblxyXG4gICAgICAgICAgICAmLS10b3lvdGEge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDBweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJi0tbmlzc2FuIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMzBweDtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogODVweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC5vcGluaW9uIHtcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAmX19uYW1lIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAtMjFweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMTVweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjRyZW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IC41ZW0gYXV0bztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICZfX3N0YXJzIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAtMjZweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMzkwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS40cmVtO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgIFxyXG5cclxufSIsIi8vID4xMjAwcHhcclxuXHJcblxyXG5AbWVkaWEgKG1pbi13aWR0aDogMTQwMHB4KSB7XHJcblxyXG4gICAgLmhlYWRlciB7XHJcbiAgICAgICAgJl9fdGl0dGxlIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAzcmVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC5oZXJvIHtcclxuXHJcbiAgICAgICAgJl9fdGV4dCB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgICAgICAgICAgcGFkZGluZzogLjVlbTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAmX19sYW1wMiB7XHJcbiAgICAgICAgICAgIGxlZnQ6IDYzMHB4O1xyXG4gICAgICAgICAgICB0b3A6IDIxMHB4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fbGFtcDMge1xyXG4gICAgICAgICAgICBsZWZ0OiA2NjBweDtcclxuICAgICAgICAgICAgdG9wOiAyMTBweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2xhbXA0IHtcclxuICAgICAgICAgICAgbGVmdDogODUzcHg7XHJcbiAgICAgICAgICAgIHRvcDogMjEzcHg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5hYm91dCB7XHJcblxyXG4gICAgICAgICZfX3RpdGxlIHtcclxuXHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogM3JlbTtcclxuXHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgICAgIHdpZHRoOiA3NTBweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2xpc3Qge1xyXG5cclxuXHJcbiAgICAgICAgICAgICYtLWl0ZW0ge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAycmVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5zZXJ2aWNlIHtcclxuICAgICAgICAmX190aXR0bGUge1xyXG4gICAgICAgICAgICBmb250LWZhbWlseTogXCJBdWRpb3dpZGVcIiwgc2Fucy1zZXJpZjtcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgICAgIGNvbG9yOiBncmV5O1xyXG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgd2hpdGVzbW9rZTtcclxuICAgICAgICAgICAgcGFkZGluZzogLjVlbSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fdGV4dCB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xyXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2JveCB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpO1xyXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIHdpZHRoOiAyNTBweDtcclxuICAgICAgICAgICAgaGVpZ2h0OiAzNTBweDtcclxuICAgICAgICAgICAgYm9yZGVyOiBub25lO1xyXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAxZW0gLjVlbTtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbjogLjNzO1xyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICAub3BpbmlvbiB7XHJcblxyXG5cclxuICAgICAgICAmX19uYW1lIHtcclxuICAgICAgICAgICAgdG9wOiAtMjhweDtcclxuICAgICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX190ZXh0IHtcclxuICAgICAgICAgICAgbWFyZ2luOiAxZW0gYXV0bztcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjRyZW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19zdGFycyB7XHJcbiAgICAgICAgICAgIHRvcDogLTI4cHg7XHJcbiAgICAgICAgICAgIGxlZnQ6IDYwMHB4O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkBtZWRpYSAobWluLXdpZHRoOiAyMDAwcHgpIHtcclxuXHJcbiAgICAuaGVhZGVyIHtcclxuICAgICAgICAmX190aXR0bGUge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDNyZW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLmhlcm8ge1xyXG5cclxuICAgICAgICAmX190ZXh0IHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAycmVtO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAuNWVtO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICZfX2xhbXAyIHtcclxuICAgICAgICAgICAgbGVmdDogNjMwcHg7XHJcbiAgICAgICAgICAgIHRvcDogMjEwcHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19sYW1wMyB7XHJcbiAgICAgICAgICAgIGxlZnQ6IDY2MHB4O1xyXG4gICAgICAgICAgICB0b3A6IDIxMHB4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fbGFtcDQge1xyXG4gICAgICAgICAgICBsZWZ0OiA4NTNweDtcclxuICAgICAgICAgICAgdG9wOiAyMTNweDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLmFib3V0IHtcclxuXHJcbiAgICAgICAgJl9fdGl0bGUge1xyXG5cclxuICAgICAgICAgICAgZm9udC1zaXplOiAzcmVtO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgJl9faW1nIHtcclxuICAgICAgICAgICAgd2lkdGg6IDc1MHB4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fbGlzdCB7XHJcblxyXG5cclxuICAgICAgICAgICAgJi0taXRlbSB7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLnNlcnZpY2Uge1xyXG4gICAgICAgICZfX3RpdHRsZSB7XHJcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBcIkF1ZGlvd2lkZVwiLCBzYW5zLXNlcmlmO1xyXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgICAgICAgICAgY29sb3I6IGdyZXk7XHJcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB3aGl0ZXNtb2tlO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAuNWVtIDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX190ZXh0IHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjFyZW07XHJcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fYm94IHtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgd2lkdGg6IDI1MHB4O1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDM1MHB4O1xyXG4gICAgICAgICAgICBib3JkZXI6IG5vbmU7XHJcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDFlbSAuNWVtO1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAuM3M7XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIC5vcGluaW9uIHtcclxuXHJcblxyXG4gICAgICAgICZfX25hbWUge1xyXG4gICAgICAgICAgICB0b3A6IC0yOHB4O1xyXG4gICAgICAgICAgICBsZWZ0OiAyMHB4O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICBtYXJnaW46IDFlbSBhdXRvO1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNHJlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX3N0YXJzIHtcclxuICAgICAgICAgICAgdG9wOiAtMjhweDtcclxuICAgICAgICAgICAgbGVmdDogMTEwMHB4O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0= */
