*,:after,:before{margin:0;padding:0;box-sizing:border-box}html{scroll-behavior:smooth}body{font-family:Roboto Flex,serif;font-weight:lighter;font-size:1.6rem}.section{background-color:rgba(0,0,0,.914);color:#f5f5f5}.header{z-index:2;position:block;color:#f5f5f5;background-image:linear-gradient(45deg,#000,rgba(0,0,0,.9));text-align:center}.header__tittle{font-family:Audiowide,sans-serif;font-size:.9rem;transform:translateY(-200px);animation:a 1s forwards}.header__span{color:red}@keyframes a{0%{transform:translateY(-200px)}to{transform:translateY(0)}}.headerShow{position:fixed;background-image:linear-gradient(45deg,rgba(0,0,0,.5),rgba(0,0,0,.6));top:0;left:0;width:100%}.hero{display:flex;justify-content:space-between;align-items:center;flex-direction:column;background-image:linear-gradient(45deg,rgba(0,0,0,.4),rgba(0,0,0,.5)),url(/dist/img/background_header2.png);background-position:50%;background-size:cover;background-repeat:no-repeat;background-attachment:scroll;height:98vh;z-index:1;overflow:hidden}.hero,.hero__info{position:relative;width:100%}.hero__info{padding:.2em}.hero__text{z-index:3;opacity:0;color:#f5f5f5;font-size:.6rem;animation:c 1s 1s ease-out forwards}.hero__text .fa-phone{position:absolute;top:15px;right:85px;font-size:.4rem}.hero__tele{z-index:3;opacity:0;position:absolute;display:block;font-family:Audiowide,sans-serif;font-size:.6rem;text-decoration:none;color:#f5f5f5}.hero__tele--first{top:5px;right:10px;animation:c 1s 1.5s ease-out forwards}.hero__tele--second{top:20px;right:10px;animation:c 1s 2s ease-out forwards}.hero__img{opacity:.5;width:150px;height:125px}.info__icon{font-size:1rem;padding:.5em 0}.info__cards{justify-content:space-around;width:100vw}.info__card,.info__cards{display:flex;align-items:center}.info__card{transform:translateY(200px);color:#f5f5f5;justify-content:center;flex-direction:column;text-align:center;width:200px;border-radius:8px;padding:.5em 1em;animation:b 2s ease-in forwards}.info__header{font-size:.7rem;color:#fff}.info__card:first-child{animation:b 1s ease-out forwards;animation-delay:2.5s}.info__card:nth-child(2){animation:b 1s ease-out forwards;animation-delay:3s}.info__card:nth-child(3){animation:b 1s ease-out forwards;animation-delay:3.5s}@keyframes b{0%{transform:translateY(200px)}to{transform:translateY(0)}}@keyframes c{0%{opacity:0}to{opacity:1}}.review{padding:.5em 1em;background-color:#000;display:flex;justify-content:center;align-items:center;flex-direction:row}.review__text{font-size:.8rem;font-weight:700;margin-left:2em}.review__tittle{text-align:center;font-family:Audiowide,sans-serif;font-size:.6rem;margin-right:1em}.review__box{position:relative}.review__box,.review__info{position:relative;display:flex;justify-content:center;align-items:center;flex-direction:row;font-size:1.2rem}.review a{margin-right:1em}.review a img{position:absolute;top:-12px;left:-20px;width:45px;height:40px}.review__info{margin-right:1.5em}.review__arrow{font-size:.6rem}.about__title{font-family:Audiowide,sans-serif;font-size:1.2rem;padding:.3em .5em;border-bottom:1px solid #fff}.about__box{display:flex;justify-content:center;align-items:center;flex-direction:column;width:100%}.about__img{width:250px;margin-top:.5em;border-radius:8px;box-shadow:5px 5px 10px hsla(0,0%,100%,.2)}.about__list{list-style:none;padding:.5em 0}.about__list--item{opacity:0;font-size:.8rem;margin-bottom:.5em}.about__list .active{animation:c 1s ease-out forwards}.about__list--item:nth-child(2){animation-delay:.5s}.about__list--item:nth-child(3){animation-delay:1s}.about__list--item:nth-child(4){animation-delay:1.5s}.about__list--item:nth-child(5){animation-delay:2s}.logo{background-color:#000;height:50px}.logo__box{display:flex;justify-content:space-evenly;align-items:center;overflow:hidden}.logo__img{width:50px;height:50px}.logo__img--bmw{height:55px}.logo__img--toyota{height:45px}.logo__img--nissan{height:35px}.services{background-image:linear-gradient(45deg,rgba(0,0,0,.4),rgba(0,0,0,.5)),url(/dist/img/background_header2.png);background-position:50%;background-size:cover;background-repeat:no-repeat;background-attachment:fixed}.services__boxes{justify-content:center;padding:.5em 1em}.service__box,.services__boxes{display:flex;align-items:center;flex-direction:column}.service__box{justify-content:space-between;background:hsla(0,0%,100%,.1);text-align:center;border-radius:10px;padding:1em .5em;transition:outline,box-shadow 1s;margin:1em 0 .5em}.service__box:hover{box-shadow:10px 10px 30px hsla(0,0%,100%,.3)}.service__tittle{font-size:1rem;font-family:Audiowide,sans-serif;text-transform:uppercase;color:grey;border-bottom:1px solid #f5f5f5;margin-bottom:2em;padding:.5em 0}.service__text{font-size:.8rem;padding:.5em}.opinions{background-color:#000;color:#f5f5f5;padding:1em 0;border-top:1px solid #f5f5f5}.opinions__box{padding:.5em 1em}.opinion__box{margin-top:.5em;position:relative;border-top:1px solid wheat;border-bottom:1px solid wheat;height:110px}.opinion__name{background-color:#000;z-index:1;position:absolute;top:-15px;left:10px;font-size:.8rem;padding:.5em 0;text-align:center}.opinion__text{text-align:center;font-size:.7rem;padding:1em}.opinion__stars{position:absolute;background-color:#000;top:-15px;left:180px;color:#daa520;text-align:center;font-size:.8rem;padding:.5em 0}.contact__box,.contact__telephone{display:flex;justify-content:center;align-items:center;flex-direction:column}.contact__privacy{text-align:center;font-size:.5rem;padding:1em 2em}.contact__privacy--link{font-weight:700;color:#f5f5f5;text-decoration:none}.contact__title{font-family:Audiowide,sans-serif;font-size:1.3rem;padding:.5em 0}.contact__text{font-size:1rem;padding:.2em 0}.contact__text--tel{font-weight:700;color:#f5f5f5;text-decoration:none}.contact__map{display:flex;justify-content:center;align-items:center;flex-direction:column;padding:1em 0}.contact__map-frame{width:80vw;height:50vh;border-radius:8px}.contact__details{text-align:center;padding:1em 0;border-top:1px solid #f5f5f5}.footer{background-color:#000}.footer__text{color:#f5f5f5;text-align:center;font-size:1rem;padding:.3em 0}.footer__credits{display:block;color:#f5f5f5;font-size:.5rem;text-decoration:none;padding:.2em}@media (min-width:390px){.header__tittle{font-size:1rem}.hero__info{padding:.4em}.hero__text{font-size:.9rem}.hero__img{width:250px;height:200px}.hero .fa-phone{font-size:.7rem}.info__icon{font-size:1.2rem}.info__header{font-size:.8rem}.review__tittle{font-size:.9rem}.review__text{margin-left:2em;font-size:1rem}.review a{margin-right:1em}.review a img{top:-15px;left:-18px;width:55px;height:50px}.about__title{font-size:1.2rem}.about__img{width:300px}.about__list--item{padding:.3em 0;font-size:.8rem}.about i{padding:0 .5em}.opinion__name{top:-17px;left:10px;font-size:.9rem}.opinion__text{font-size:.8rem}.opinion__stars{top:-17px;left:220px;font-size:.9rem}}@media (min-width:430px){.about__img{width:350px}.about__list--item{font-size:1rem}.review__info{margin-right:1.5em}.review__arrow{font-size:.7rem}.service__tittle{font-size:1.2rem}.service__text{font-size:1rem}.opinion__stars{top:-17px;left:260px}.contact__privacy{font-size:.7rem}}@media (min-width:480px){.opinion__stars{top:-18px;left:300px}.contact__title{font-size:1.5rem;padding:.5em 0}.contact__text{font-size:1.2rem}}@media (min-width:576px){.header__tittle{font-size:1.6rem}.review__text,.review__tittle{font-size:1.2rem}.review a img{top:-13px;left:-15px}.review__info{margin-right:1.5em}.review__arrow{font-size:.9rem}.hero{height:96vh}.hero .fa-phone,.hero__text{font-size:1.2rem}.hero .fa-phone{top:25px;right:150px}.hero__tele{font-size:1.2rem}.hero__tele--first{top:10px}.hero__tele--second{top:35px}.info__icon{font-size:1.6rem}.info__header{font-size:1.2rem}.about__title{font-size:1.6rem}.about__img{width:400px}.about__list--item{font-size:1.3rem}.logo{height:100%}.logo__img{width:70px}.logo__img,.logo__img--toyota{height:70px}.logo__img--nissan{width:75px;height:55px}.opinion__name{top:-18px;left:10px;font-size:1rem}.opinion__text{font-size:.9rem}.opinion__stars{top:-19px;left:400px;font-size:1rem}}@media (min-width:670px){.about__title{font-size:2rem;padding:.2em .5em}.about__box{flex-direction:row;padding:.5em 1em}.about__img{width:300px}.about__list{padding:0 .5em}.about__list--item{padding:.1em 0;font-size:1rem}.about i{padding:0 .5em}.logo__img--nissan{width:80px;height:55px}.service__tittle{font-size:1.4rem}.service__text{font-size:1.2rem}.opinion__name{top:-19px;left:15px;font-size:1.1rem}.opinion__text{font-size:1rem}.opinion__stars{top:-20px;left:480px;font-size:1.1rem}}@media (min-width:768px){.header__tittle{font-size:2rem}.hero__img{width:350px;height:300px}.hero .fa-phone,.hero__text{font-size:1.6rem}.hero .fa-phone{top:30px;right:210px}.hero__tele{font-size:1.6rem}.hero__tele--first{right:20px}.hero__tele--second{top:45px;right:20px}.review__text,.review__tittle{font-size:1.6rem}.review a img{top:-11px;left:-13px;width:65px;height:55px}.info__header,.info__icon{font-size:1.6rem}.about__title{font-size:2rem;padding:.2em .5em}.about__box{padding:.5em 1em}.about__img{width:350px}.about__list--item{font-size:1.3rem}.services{background-image:linear-gradient(45deg,rgba(0,0,0,.4),rgba(0,0,0,.5)),url(/dist/img/background_header2.png);background-position:50%;background-size:cover;background-repeat:no-repeat;background-attachment:fixed}.services__boxes{display:flex;justify-content:space-evenly;align-items:center;flex-direction:row;flex-wrap:wrap}.services .service__tittle{font-family:Audiowide,sans-serif;text-transform:uppercase;font-size:1.3rem;color:grey;border-bottom:1px solid #f5f5f5;padding:.5em 0}.services .service__text{font-size:1rem;text-transform:capitalize}.services .service__box{display:flex;justify-content:space-between;align-items:center;flex-direction:column;background:hsla(0,0%,100%,.1);text-align:center;width:200px;height:300px;border:none;border-radius:10px;transition:.3s}.services .service__box:hover{box-shadow:5px 5px 30px hsla(0,0%,100%,.3)}.services .service__boxes--bottom,.services .service__boxes--top{width:100%;display:flex;justify-content:space-evenly;align-items:center;flex-direction:row;margin:1em 0}.opinion__name{top:-22px;left:15px;font-size:1.2rem}.opinion__text{font-size:1.1rem}.opinion__stars{top:-22px;left:540px;font-size:1.2rem}.contact__box{display:flex;justify-content:space-evenly;align-items:center;flex-direction:row}.contact__title{font-family:Audiowide,sans-serif;font-size:1.4rem;padding:.5em 0}.contact__text{font-size:1.2rem}.contact__map{width:55vw;display:flex;justify-content:center;align-items:center;flex-direction:column;padding:1em 2em}.contact__details,.contact__map-frame{width:50vw;height:50vh}.contact__details{display:flex;justify-content:space-around;align-items:center;flex-direction:column;padding:.5em 1em;border-top:none}.contact__privacy{text-align:left;font-size:.7rem}}@media (min-width:900px){.about__box{padding:.5em 1em}.about__img{width:450px}.about__list--item{margin-bottom:.5em;font-size:1.4rem}.opinion__stars{top:-22px;left:680px}}@media (min-width:992px){.hero__img{width:450px;height:400px}.review__tittle{font-size:2rem}.review__text{font-size:1.6rem}.review a img{top:-16px;left:-20px;width:75px;height:65px}.review__info{margin-right:2.2em}.review__arrow{font-size:1rem}.info__header,.info__icon{font-size:1.6rem}.about__title{font-size:2.2rem}.about__box{padding:.5em 1em}.about__img{width:500px}.about__list--item{margin-bottom:1em;font-size:1.6rem}.services{background-image:linear-gradient(45deg,rgba(0,0,0,.4),rgba(0,0,0,.5)),url(/dist/img/background_header2.png);background-position:50%;background-size:cover;background-repeat:no-repeat;background-attachment:fixed}.services__boxes{display:flex;justify-content:space-evenly;align-items:center;flex-direction:row;flex-wrap:wrap;padding:1em}.services .service__tittle{font-family:Audiowide,sans-serif;text-transform:uppercase;font-size:1.6rem;color:grey;border-bottom:1px solid #f5f5f5;padding:.5em 0}.services .service__text{font-size:1.1rem;text-transform:capitalize}.services .service__box{display:flex;justify-content:space-between;align-items:center;flex-direction:column;background:hsla(0,0%,100%,.1);text-align:center;width:250px;height:350px;border:none;border-radius:10px;padding:1em .5em;transition:.3s}.services .service__box:hover{box-shadow:5px 5px 30px hsla(0,0%,100%,.3)}.services .service__boxes--bottom,.services .service__boxes--top{width:100%;display:flex;justify-content:space-evenly;align-items:center;flex-direction:row;margin:2em 0}.opinion__box{margin-right:1em;height:160px}.opinion__name{top:-21px;left:15px;font-size:1.2rem}.opinion__text{margin:.3em auto;font-size:1.1rem}.opinion__stars{top:-24px;left:310px;font-size:1.2rem}}@media (min-width:1024px){.about__box{padding:.5em 1em;display:flex;justify-content:space-around;align-items:center;width:100%}.about__title{font-size:2.5rem}.about__box{padding:1em}.about__img{width:550px}.about__list--item{font-size:1.6rem}.opinion__stars{top:-23px}.contact__title{font-size:1.6rem}.contact__text{font-size:1.4rem}.contact__map{width:65vw}.contact__map-frame{width:60vw;height:50vh}}@media (min-width:1200px){.header__tittle{font-size:2rem}.header__text{font-size:1.6rem}.hero{background-attachment:fixed}.review__text{margin-left:3em}.review__tittle{font-size:2rem}.review a img{top:-25px;left:-25px;width:120px;height:90px}.review__text{font-size:2rem}.review__info{margin-right:3em}.info__icon{font-size:3rem}.info__header{font-size:2rem}.about__box{padding:.5em 1em;display:flex;justify-content:space-around;align-items:center;width:100%}.about__title{font-size:2.5rem}.about__box{padding:1em}.about__img{width:650px}.about__list--item{font-size:1.6rem}.logo__img{width:100px}.logo__img,.logo__img--toyota{height:100px}.logo__img--nissan{width:130px;height:85px}.opinion__name{top:-21px;left:15px;font-size:1.4rem}.opinion__text{margin:.5em auto;font-size:1.2rem}.opinion__stars{top:-26px;left:390px;font-size:1.4rem}.contact__title{font-size:2rem}.contact__text{font-size:1.6rem}.contact__map-frame{width:60vw;height:60vh}}@media (min-width:1400px){.header__tittle{font-size:3rem}.hero{height:93vh}.hero__text{font-size:2rem;padding:.5em}.hero .fa-phone{top:45px;right:210px}.hero .fa-phone,.hero__tele{font-size:1.6rem}.hero__tele--first{top:30px;right:20px}.hero__tele--second{top:65px;right:20px}.about__title{font-size:3rem}.about__img{width:750px}.about__list--item{font-size:2rem}.service__tittle{font-family:Audiowide,sans-serif;text-transform:uppercase;font-size:1.6rem;color:grey;border-bottom:1px solid #f5f5f5;padding:.5em 0}.service__text{font-size:1.1rem;text-transform:capitalize}.service__box{display:flex;justify-content:space-between;align-items:center;flex-direction:column;background:hsla(0,0%,100%,.1);text-align:center;width:250px;height:350px;border:none;border-radius:10px;padding:1em .5em;transition:.3s}.opinion__name{top:-28px;left:20px;font-size:1.6rem}.opinion__text{margin:1em auto;font-size:1.4rem}.opinion__stars{top:-28px;left:600px;font-size:1.6rem}}@media (min-width:2000px){.header__tittle{font-size:3rem}.hero__text{font-size:2rem;padding:.5em}.about__title{font-size:3rem}.about__img{width:750px}.about__list--item{font-size:2rem}.service__tittle{font-family:Audiowide,sans-serif;text-transform:uppercase;font-size:1.6rem;color:grey;border-bottom:1px solid #f5f5f5;padding:.5em 0}.service__text{font-size:1.1rem;text-transform:capitalize}.service__box{display:flex;justify-content:space-between;align-items:center;flex-direction:column;background:hsla(0,0%,100%,.1);text-align:center;width:250px;height:350px;border:none;border-radius:10px;padding:1em .5em;transition:.3s}.opinion__name{top:-28px;left:20px;font-size:1.6rem}.opinion__text{margin:1em auto;font-size:1.4rem}.opinion__stars{top:-28px;left:1100px;font-size:1.6rem}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
